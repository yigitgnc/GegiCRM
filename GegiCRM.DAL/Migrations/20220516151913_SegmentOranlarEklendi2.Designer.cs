// <auto-generated />
using System;
using GegiCRM.DAL.Concrete;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GegiCRM.DAL.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20220516151913_SegmentOranlarEklendi2")]
    partial class SegmentOranlarEklendi2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("GegiCRM.Entities.Concrete.Announcement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Descirption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AddedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("Announcements");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.AppIdentityRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddedBy")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("RoleGroupId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.HasIndex("RoleGroupId");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddedBy = 1,
                            ConcurrencyStamp = "2333022b-8b6e-4046-9f3d-d8296835f2f5",
                            CreatedDate = new DateTime(2022, 5, 16, 18, 19, 11, 113, DateTimeKind.Local).AddTicks(8063),
                            Description = "Sistem Admini Full Yetki",
                            IsDeleted = false,
                            ModifiedBy = 1,
                            ModifiedDate = new DateTime(2022, 5, 16, 18, 19, 11, 113, DateTimeKind.Local).AddTicks(8075),
                            Name = "SysAdmin",
                            NormalizedName = "Sistem Admini",
                            RoleGroupId = 1
                        });
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.AppIdentityRoleGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("AppAuthorizationsRoleGroups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Admin Rollerinin Bulunduğu Grup",
                            IsDeleted = false,
                            Name = "Admin Role Grubu",
                            Priority = 0
                        });
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("AddedBy")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<int>("UserCompanyId")
                        .HasColumnType("int")
                        .HasColumnName("UserCompanyID");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AddedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserCompanyId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            AddedBy = 1,
                            ConcurrencyStamp = "c1b77e7f-115c-4954-a528-da265732c5d8",
                            CreatedDate = new DateTime(2022, 5, 16, 18, 19, 11, 111, DateTimeKind.Local).AddTicks(6179),
                            Email = "yigit.genc@gegi.com.tr",
                            EmailConfirmed = true,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            ModifiedDate = new DateTime(2022, 5, 16, 18, 19, 11, 111, DateTimeKind.Local).AddTicks(6194),
                            Name = "Yiğit",
                            NormalizedEmail = "YIGIT.GENC@GEGI.COM.TR",
                            NormalizedUserName = "ADMINYGT",
                            PasswordHash = "AQAAAAEAACcQAAAAEJOl42vYFkZbo/zNFideKZW9xEdmqWvpVbK5Xv2uin8y56xsOD3eP8p797Edoj8u3Q==",
                            PhoneNumber = "+905382630008",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8bc1ede8-59c1-48c9-ba9e-ac19ab3641c8",
                            Surname = "Genç",
                            TwoFactorEnabled = false,
                            UserCompanyId = 1,
                            UserName = "AdminYigit"
                        });
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.Bank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddedBy")
                        .HasColumnType("int");

                    b.Property<string>("BankDescirption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id");

                    b.HasIndex("AddedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("Banks");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.BankInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddedBy")
                        .HasColumnType("int");

                    b.Property<int>("BankId")
                        .HasColumnType("int")
                        .HasColumnName("BankID");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("HesapNo")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Iban")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("IBAN");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Sube")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("SubeNo")
                        .HasColumnType("int");

                    b.Property<string>("Ttile")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("AddedBy");

                    b.HasIndex("BankId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("BankInformations");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.Birim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Short")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AddedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("Birims");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AddedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.CollectionReceipt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<decimal>("CurrencyExchange")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int")
                        .HasColumnName("CurrencyID");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("KartinUstundekiIsım")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("NameSurname")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("PaymentTypeId")
                        .HasColumnType("int")
                        .HasColumnName("PaymentTypeID");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int")
                        .HasColumnName("SupplierID");

                    b.Property<short>("Taksit")
                        .HasColumnType("smallint");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("AddedBy");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("PaymentTypeId");

                    b.HasIndex("SupplierId");

                    b.ToTable("CollectionReceipts");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddedBy")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AddedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("Currencies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddedBy = 1,
                            Code = "TRY",
                            CreatedDate = new DateTime(2022, 5, 16, 18, 19, 11, 113, DateTimeKind.Local).AddTicks(8266),
                            IsDeleted = false,
                            Name = "Türk Lirası"
                        },
                        new
                        {
                            Id = 2,
                            AddedBy = 1,
                            Code = "USD",
                            CreatedDate = new DateTime(2022, 5, 16, 18, 19, 11, 113, DateTimeKind.Local).AddTicks(8306),
                            IsDeleted = false,
                            Name = "Amerikan Doları"
                        },
                        new
                        {
                            Id = 3,
                            AddedBy = 1,
                            Code = "EUR",
                            CreatedDate = new DateTime(2022, 5, 16, 18, 19, 11, 113, DateTimeKind.Local).AddTicks(8312),
                            IsDeleted = false,
                            Name = "EURO"
                        });
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddedBy")
                        .HasColumnType("int");

                    b.Property<string>("CariKodu")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastContactDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("SectorId")
                        .HasColumnType("int")
                        .HasColumnName("SectorID");

                    b.Property<int>("SegmentId")
                        .HasColumnType("int")
                        .HasColumnName("SegmentID");

                    b.Property<string>("Surname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TicariUnvan")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("TypeId")
                        .HasColumnType("int")
                        .HasColumnName("TypeID");

                    b.HasKey("Id");

                    b.HasIndex("AddedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("SectorId");

                    b.HasIndex("SegmentId");

                    b.HasIndex("TypeId");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddedBy = 1,
                            CariKodu = "123",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Test Müşterisi",
                            SectorId = 1,
                            SegmentId = 1,
                            Surname = "Soyad",
                            TicariUnvan = "Test Ticari Ünvanı",
                            TypeId = 1
                        });
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.CustomerAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddedBy")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<string>("Il")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Ilce")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeliveryAddress")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id");

                    b.HasIndex("AddedBy");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("CustomerAddresses");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.CustomerBillingAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddedBy")
                        .HasColumnType("int");

                    b.Property<string>("AddressName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BillingAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VergiDairesi")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("VergiNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AddedBy");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("CustomerBillingAddresses");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.CustomerContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddedBy")
                        .HasColumnType("int");

                    b.Property<string>("ContactName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ContactSurname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ContactTitle")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<string>("Email")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Gsm")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("GSM");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Tel")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AddedBy");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("CustomerContacts");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.CustomerDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int")
                        .HasColumnName("CurrencyID");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SideSuppliers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tel")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AddedBy");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("CustomerDetails");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.CustomerRepresentetiveUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.HasIndex("AddedBy");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("UserId");

                    b.ToTable("CustomerRepresentetiveUsers");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.CustomerType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AddedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("CustomerTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Bu Müşteri Tipi Tesat Amaçlı Eklenmiştir",
                            IsDeleted = false,
                            Name = "Test Müşteri Tipi"
                        });
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("DepartmentDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id");

                    b.HasIndex("AddedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.DepartmentsOfUser", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("DepartmentID");

                    b.Property<int>("AddedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsResponsible")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "DepartmentId");

                    b.HasIndex("AddedBy");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("DepartmentsOfUsers");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.Deposit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddedBy")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("BitisSuresi")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int")
                        .HasColumnName("CurrencyID");

                    b.Property<int>("DepositRelationId")
                        .HasColumnType("int")
                        .HasColumnName("DepositRelationID");

                    b.Property<int>("DepositTypeId")
                        .HasColumnType("int")
                        .HasColumnName("DepositTypeID");

                    b.Property<string>("IlgiliKisi")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("KurumAdi")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VerilisTarihi")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("AddedBy");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("DepositRelationId");

                    b.HasIndex("DepositTypeId");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("Deposits");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.DepositRelation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AddedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("DepositRelations");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.DepositType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AddedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("DepositTypes");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.DiscountCupon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CuponCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CuponCurrencyId")
                        .HasColumnType("int")
                        .HasColumnName("CuponCurrencyID");

                    b.Property<string>("CuponDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CuponName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("DiscountAmountMoney")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id");

                    b.HasIndex("AddedBy");

                    b.HasIndex("CuponCurrencyId");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("DiscountCupons");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.DiscountCuponsOfCustomer", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<int>("DiscountCuponId")
                        .HasColumnType("int")
                        .HasColumnName("DiscountCuponID");

                    b.Property<int>("AddedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpryDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("CustomerId", "DiscountCuponId");

                    b.HasIndex("AddedBy");

                    b.HasIndex("DiscountCuponId");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("DiscountCuponsOfCustomers");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("DocumentDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentDownloadPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("TypeId")
                        .HasColumnType("int")
                        .HasColumnName("TypeID");

                    b.HasKey("Id");

                    b.HasIndex("AddedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("TypeId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.DocumentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddedBy")
                        .HasColumnType("int");

                    b.Property<int>("AddedByNavigationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedByNavigationId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TypeName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AddedByNavigationId");

                    b.HasIndex("ModifiedByNavigationId");

                    b.ToTable("DocumentTypes");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.EmailTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("DepartmentID");

                    b.Property<string>("Explanation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("MailContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddedBy");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("EmailTemplates");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.Expansion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ShortCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("AddedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("Expansions");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.MaintenanceBill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int")
                        .HasColumnName("CurrencyID");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<int?>("CustomerRepresentetiveUserId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerRepresentetiveUserID");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<TimeSpan?>("MainteneceTime")
                        .HasColumnType("time");

                    b.Property<int>("MaintenencePeriodId")
                        .HasColumnType("int")
                        .HasColumnName("MaintenencePeriodID");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductGroupId")
                        .HasColumnType("int")
                        .HasColumnName("ProductGroupID");

                    b.Property<int?>("SellingRepresentetiveUserId")
                        .HasColumnType("int")
                        .HasColumnName("SellingRepresentetiveUserID");

                    b.Property<DateTime?>("SozlesmeBaslangicTarihi")
                        .HasColumnType("datetime");

                    b.Property<decimal>("SozlesmeBedeli")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("SozlesmeBitisTarihi")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("AddedBy");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("CustomerRepresentetiveUserId");

                    b.HasIndex("MaintenencePeriodId");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("ProductGroupId");

                    b.HasIndex("SellingRepresentetiveUserId");

                    b.ToTable("MaintenanceBills");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.MaintenencePeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AddedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("MaintenencePeriods");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.MarketPlace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("MarketPlaceDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MarketPlaceName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id");

                    b.HasIndex("AddedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("MarketPlaces");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFrequentlyUsed")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("OrderStateId")
                        .HasColumnType("int")
                        .HasColumnName("OrderStateID");

                    b.HasKey("Id");

                    b.HasIndex("AddedBy");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("OrderStateId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.OrderAndProductState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AddedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("OrderAndProductStates");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.OrdersCurrency", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int")
                        .HasColumnName("CurrencyID");

                    b.Property<int>("AddedBy")
                        .HasColumnType("int");

                    b.Property<int>("AddedByNavigationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("ExchangeRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedByNavigationId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("OrderId", "CurrencyId");

                    b.HasIndex("AddedByNavigationId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("ModifiedByNavigationId");

                    b.ToTable("OrdersCurrencies");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.OrdersProduct", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<DateTime?>("AbonelikBaslangic")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("AbonelikBitis")
                        .HasColumnType("datetime");

                    b.Property<int>("AddedBy")
                        .HasColumnType("int");

                    b.Property<decimal?>("Adet")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("BirimFiyat")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BirimId")
                        .HasColumnType("int")
                        .HasColumnName("BirimID");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("KesinCurrencyId")
                        .HasColumnType("int")
                        .HasColumnName("KesinCurrencyID");

                    b.Property<decimal?>("KesinFiyat")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("KesinSevkTarihi")
                        .HasColumnType("datetime");

                    b.Property<int?>("KesinSupplierId")
                        .HasColumnType("int")
                        .HasColumnName("KesinSupplierID");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductStateId")
                        .HasColumnType("int")
                        .HasColumnName("ProductStateID");

                    b.Property<string>("ReferanceCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ReferansBirimFiyat")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<int?>("ReferansCurrencyId")
                        .HasColumnType("int")
                        .HasColumnName("ReferansCurrencyID");

                    b.Property<int>("ReferansSupplierId")
                        .HasColumnType("int")
                        .HasColumnName("ReferansSupplierID");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("AddedBy");

                    b.HasIndex("BirimId");

                    b.HasIndex("KesinCurrencyId");

                    b.HasIndex("KesinSupplierId");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductStateId");

                    b.HasIndex("ReferansCurrencyId");

                    b.HasIndex("ReferansSupplierId");

                    b.ToTable("OrdersProducts");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.PaymentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AddedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("PaymentTypes");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<double>("KdvOrani")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValueSql("((18))");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("PorductBrandId")
                        .HasColumnType("int")
                        .HasColumnName("PorductBrandID");

                    b.Property<string>("ProductDescription")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ProductGroupId")
                        .HasColumnType("int")
                        .HasColumnName("ProductGroupID");

                    b.Property<string>("ProductName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("StockCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("PorductBrandId");

                    b.HasIndex("ProductGroupId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ProductCategoryDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductCategoryName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("ProductGroupId")
                        .HasColumnType("int")
                        .HasColumnName("ProductGroupID");

                    b.HasKey("Id");

                    b.HasIndex("AddedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("ProductGroupId");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.ProductGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("GroupDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id");

                    b.HasIndex("AddedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("ProductGroups");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.ProductGroupsFaq", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddedBy")
                        .HasColumnType("int");

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("ProductGroupId")
                        .HasColumnType("int")
                        .HasColumnName("ProductGroupID");

                    b.Property<string>("Question")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("ProductGroupId");

                    b.ToTable("ProductGroupsFAQs", (string)null);
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.ReturnAndFault", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("CurrentStateId")
                        .HasColumnType("int")
                        .HasColumnName("CurrentStateID");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("OrderIdIfExist")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PlannedDeadline")
                        .HasColumnType("datetime");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<int>("RepresentitveUser")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int")
                        .HasColumnName("SupplierID");

                    b.HasKey("Id");

                    b.HasIndex("AddedBy");

                    b.HasIndex("CurrentStateId");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("RepresentitveUser");

                    b.ToTable("ReturnAndFaults");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.ReturnAndFaultState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("StatDescription")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StatName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AddedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("ReturnAndFaultStates");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.Rule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("RuleDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RuleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AddedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("Rules");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.Sector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("AddedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("Sectors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Test Sektör Açıklaması",
                            IsDeleted = false,
                            Name = "Test Sektörü"
                        });
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.Segment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AddedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("Segments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddedBy = 1,
                            CreatedDate = new DateTime(2022, 5, 16, 18, 19, 11, 113, DateTimeKind.Local).AddTicks(8386),
                            Description = "Segment 1 Açıklaması",
                            IsDeleted = false,
                            Name = "Segment 1"
                        },
                        new
                        {
                            Id = 2,
                            AddedBy = 1,
                            CreatedDate = new DateTime(2022, 5, 16, 18, 19, 11, 113, DateTimeKind.Local).AddTicks(8402),
                            Description = "Segment 2 Açıklaması",
                            IsDeleted = false,
                            Name = "Segment 2"
                        },
                        new
                        {
                            Id = 3,
                            AddedBy = 1,
                            CreatedDate = new DateTime(2022, 5, 16, 18, 19, 11, 113, DateTimeKind.Local).AddTicks(8428),
                            Description = "Segment 3 Açıklaması",
                            IsDeleted = false,
                            Name = "Segment 3"
                        },
                        new
                        {
                            Id = 4,
                            AddedBy = 1,
                            CreatedDate = new DateTime(2022, 5, 16, 18, 19, 11, 113, DateTimeKind.Local).AddTicks(8437),
                            Description = "Segment 4 Açıklaması",
                            IsDeleted = false,
                            Name = "Segment 4"
                        },
                        new
                        {
                            Id = 5,
                            AddedBy = 1,
                            CreatedDate = new DateTime(2022, 5, 16, 18, 19, 11, 113, DateTimeKind.Local).AddTicks(8450),
                            Description = "Segment 5 Açıklaması",
                            IsDeleted = false,
                            Name = "Segment 5"
                        },
                        new
                        {
                            Id = 6,
                            AddedBy = 1,
                            CreatedDate = new DateTime(2022, 5, 16, 18, 19, 11, 113, DateTimeKind.Local).AddTicks(8456),
                            Description = "Segment 6 Açıklaması",
                            IsDeleted = false,
                            Name = "Segment 6"
                        },
                        new
                        {
                            Id = 7,
                            AddedBy = 1,
                            CreatedDate = new DateTime(2022, 5, 16, 18, 19, 11, 113, DateTimeKind.Local).AddTicks(8460),
                            Description = "Segment 7 Açıklaması",
                            IsDeleted = false,
                            Name = "Segment 7"
                        },
                        new
                        {
                            Id = 8,
                            AddedBy = 1,
                            CreatedDate = new DateTime(2022, 5, 16, 18, 19, 11, 113, DateTimeKind.Local).AddTicks(8464),
                            Description = "Segment 8 Açıklaması",
                            IsDeleted = false,
                            Name = "Segment 8"
                        },
                        new
                        {
                            Id = 9,
                            AddedBy = 1,
                            CreatedDate = new DateTime(2022, 5, 16, 18, 19, 11, 113, DateTimeKind.Local).AddTicks(8479),
                            Description = "Segment 9 Açıklaması",
                            IsDeleted = false,
                            Name = "Segment 9"
                        },
                        new
                        {
                            Id = 10,
                            AddedBy = 1,
                            CreatedDate = new DateTime(2022, 5, 16, 18, 19, 11, 113, DateTimeKind.Local).AddTicks(8487),
                            Description = "Segment 10 Açıklaması",
                            IsDeleted = false,
                            Name = "Segment 10"
                        });
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.SegmentOran", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("CurrencyID")
                        .HasColumnType("int");

                    b.Property<decimal>("EndPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<decimal>("Oran")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SegmentId")
                        .HasColumnType("int")
                        .HasColumnName("SegmentID");

                    b.Property<decimal>("StartPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("AddedBy");

                    b.HasIndex("CurrencyID");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("SegmentId");

                    b.ToTable("SegmentOrans");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 49.99m,
                            IsDeleted = false,
                            Oran = 22.5m,
                            SegmentId = 1,
                            StartPrice = 0.00m
                        },
                        new
                        {
                            Id = 2,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 199.99m,
                            IsDeleted = false,
                            Oran = 13.5m,
                            SegmentId = 1,
                            StartPrice = 50.00m
                        },
                        new
                        {
                            Id = 3,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 499.99m,
                            IsDeleted = false,
                            Oran = 11m,
                            SegmentId = 1,
                            StartPrice = 200.00m
                        },
                        new
                        {
                            Id = 4,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 999.99m,
                            IsDeleted = false,
                            Oran = 7.5m,
                            SegmentId = 1,
                            StartPrice = 500.00m
                        },
                        new
                        {
                            Id = 5,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 2499.99m,
                            IsDeleted = false,
                            Oran = 6m,
                            SegmentId = 1,
                            StartPrice = 1000.00m
                        },
                        new
                        {
                            Id = 6,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 4999.99m,
                            IsDeleted = false,
                            Oran = 5.25m,
                            SegmentId = 1,
                            StartPrice = 2500.00m
                        },
                        new
                        {
                            Id = 7,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 9999.99m,
                            IsDeleted = false,
                            Oran = 5m,
                            SegmentId = 1,
                            StartPrice = 5000.00m
                        },
                        new
                        {
                            Id = 8,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 19999.99m,
                            IsDeleted = false,
                            Oran = 4.5m,
                            SegmentId = 1,
                            StartPrice = 10000.00m
                        },
                        new
                        {
                            Id = 9,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 39999.99m,
                            IsDeleted = false,
                            Oran = 4m,
                            SegmentId = 1,
                            StartPrice = 20000.00m
                        },
                        new
                        {
                            Id = 10,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 74999.99m,
                            IsDeleted = false,
                            Oran = 3.38m,
                            SegmentId = 1,
                            StartPrice = 40000.00m
                        },
                        new
                        {
                            Id = 11,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 99999.99m,
                            IsDeleted = false,
                            Oran = 3m,
                            SegmentId = 1,
                            StartPrice = 75000.00m
                        },
                        new
                        {
                            Id = 12,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 149999.99m,
                            IsDeleted = false,
                            Oran = 3m,
                            SegmentId = 1,
                            StartPrice = 100000.00m
                        },
                        new
                        {
                            Id = 13,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 249999.99m,
                            IsDeleted = false,
                            Oran = 2m,
                            SegmentId = 1,
                            StartPrice = 150000.00m
                        },
                        new
                        {
                            Id = 14,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 499999.99m,
                            IsDeleted = false,
                            Oran = 1.88m,
                            SegmentId = 1,
                            StartPrice = 250000.00m
                        },
                        new
                        {
                            Id = 15,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 999999.99m,
                            IsDeleted = false,
                            Oran = 2m,
                            SegmentId = 1,
                            StartPrice = 500000.00m
                        },
                        new
                        {
                            Id = 16,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 99999999.99m,
                            IsDeleted = false,
                            Oran = 1.5m,
                            SegmentId = 1,
                            StartPrice = 1000000.00m
                        },
                        new
                        {
                            Id = 17,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 49.99m,
                            IsDeleted = false,
                            Oran = 27m,
                            SegmentId = 2,
                            StartPrice = 0.00m
                        },
                        new
                        {
                            Id = 18,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 199.99m,
                            IsDeleted = false,
                            Oran = 16.2m,
                            SegmentId = 2,
                            StartPrice = 50.00m
                        },
                        new
                        {
                            Id = 19,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 499.99m,
                            IsDeleted = false,
                            Oran = 126.6m,
                            SegmentId = 2,
                            StartPrice = 200.00m
                        },
                        new
                        {
                            Id = 20,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 999.99m,
                            IsDeleted = false,
                            Oran = 9m,
                            SegmentId = 2,
                            StartPrice = 500.00m
                        },
                        new
                        {
                            Id = 21,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 2499.99m,
                            IsDeleted = false,
                            Oran = 7.2m,
                            SegmentId = 2,
                            StartPrice = 1000.00m
                        },
                        new
                        {
                            Id = 22,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 4999.99m,
                            IsDeleted = false,
                            Oran = 6.3m,
                            SegmentId = 2,
                            StartPrice = 2500.00m
                        },
                        new
                        {
                            Id = 23,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 9999.99m,
                            IsDeleted = false,
                            Oran = 5.85m,
                            SegmentId = 2,
                            StartPrice = 5000.00m
                        },
                        new
                        {
                            Id = 24,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 19999.99m,
                            IsDeleted = false,
                            Oran = 5.4m,
                            SegmentId = 2,
                            StartPrice = 10000.00m
                        },
                        new
                        {
                            Id = 25,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 39999.99m,
                            IsDeleted = false,
                            Oran = 4.5m,
                            SegmentId = 2,
                            StartPrice = 20000.00m
                        },
                        new
                        {
                            Id = 26,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 74999.99m,
                            IsDeleted = false,
                            Oran = 4.05m,
                            SegmentId = 2,
                            StartPrice = 40000.00m
                        },
                        new
                        {
                            Id = 27,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 99999.99m,
                            IsDeleted = false,
                            Oran = 3.78m,
                            SegmentId = 2,
                            StartPrice = 75000.00m
                        },
                        new
                        {
                            Id = 28,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 149999.99m,
                            IsDeleted = false,
                            Oran = 3.6m,
                            SegmentId = 2,
                            StartPrice = 100000.00m
                        },
                        new
                        {
                            Id = 29,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 249999.99m,
                            IsDeleted = false,
                            Oran = 2.7m,
                            SegmentId = 2,
                            StartPrice = 150000.00m
                        },
                        new
                        {
                            Id = 30,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 499999.99m,
                            IsDeleted = false,
                            Oran = 2.25m,
                            SegmentId = 2,
                            StartPrice = 250000.00m
                        },
                        new
                        {
                            Id = 31,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 999999.99m,
                            IsDeleted = false,
                            Oran = 1.98m,
                            SegmentId = 2,
                            StartPrice = 500000.00m
                        },
                        new
                        {
                            Id = 32,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 99999999.99m,
                            IsDeleted = false,
                            Oran = 1.8m,
                            SegmentId = 2,
                            StartPrice = 1000000.00m
                        },
                        new
                        {
                            Id = 33,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 49.99m,
                            IsDeleted = false,
                            Oran = 32.4m,
                            SegmentId = 3,
                            StartPrice = 0.00m
                        },
                        new
                        {
                            Id = 34,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 199.99m,
                            IsDeleted = false,
                            Oran = 19.44m,
                            SegmentId = 3,
                            StartPrice = 50.00m
                        },
                        new
                        {
                            Id = 35,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 499.99m,
                            IsDeleted = false,
                            Oran = 15.12m,
                            SegmentId = 3,
                            StartPrice = 200.00m
                        },
                        new
                        {
                            Id = 36,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 999.99m,
                            IsDeleted = false,
                            Oran = 10.8m,
                            SegmentId = 3,
                            StartPrice = 500.00m
                        },
                        new
                        {
                            Id = 37,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 2499.99m,
                            IsDeleted = false,
                            Oran = 8.64m,
                            SegmentId = 3,
                            StartPrice = 1000.00m
                        },
                        new
                        {
                            Id = 38,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 4999.99m,
                            IsDeleted = false,
                            Oran = 7.56m,
                            SegmentId = 3,
                            StartPrice = 2500.00m
                        },
                        new
                        {
                            Id = 39,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 9999.99m,
                            IsDeleted = false,
                            Oran = 7.02m,
                            SegmentId = 3,
                            StartPrice = 5000.00m
                        },
                        new
                        {
                            Id = 40,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 19999.99m,
                            IsDeleted = false,
                            Oran = 6.48m,
                            SegmentId = 3,
                            StartPrice = 10000.00m
                        },
                        new
                        {
                            Id = 41,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 39999.99m,
                            IsDeleted = false,
                            Oran = 5.4m,
                            SegmentId = 3,
                            StartPrice = 20000.00m
                        },
                        new
                        {
                            Id = 42,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 74999.99m,
                            IsDeleted = false,
                            Oran = 4.86m,
                            SegmentId = 3,
                            StartPrice = 40000.00m
                        },
                        new
                        {
                            Id = 43,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 99999.99m,
                            IsDeleted = false,
                            Oran = 4.54m,
                            SegmentId = 3,
                            StartPrice = 75000.00m
                        },
                        new
                        {
                            Id = 44,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 149999.99m,
                            IsDeleted = false,
                            Oran = 4.32m,
                            SegmentId = 3,
                            StartPrice = 100000.00m
                        },
                        new
                        {
                            Id = 45,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 249999.99m,
                            IsDeleted = false,
                            Oran = 3.24m,
                            SegmentId = 3,
                            StartPrice = 150000.00m
                        },
                        new
                        {
                            Id = 46,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 499999.99m,
                            IsDeleted = false,
                            Oran = 2.7m,
                            SegmentId = 3,
                            StartPrice = 250000.00m
                        },
                        new
                        {
                            Id = 47,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 999999.99m,
                            IsDeleted = false,
                            Oran = 2.38m,
                            SegmentId = 3,
                            StartPrice = 500000.00m
                        },
                        new
                        {
                            Id = 48,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 99999999.99m,
                            IsDeleted = false,
                            Oran = 2.16m,
                            SegmentId = 3,
                            StartPrice = 1000000.00m
                        },
                        new
                        {
                            Id = 49,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 49.99m,
                            IsDeleted = false,
                            Oran = 38.88m,
                            SegmentId = 4,
                            StartPrice = 0.00m
                        },
                        new
                        {
                            Id = 50,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 199.99m,
                            IsDeleted = false,
                            Oran = 23.33m,
                            SegmentId = 4,
                            StartPrice = 50.00m
                        },
                        new
                        {
                            Id = 51,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 499.99m,
                            IsDeleted = false,
                            Oran = 18.14m,
                            SegmentId = 4,
                            StartPrice = 200.00m
                        },
                        new
                        {
                            Id = 52,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 999.99m,
                            IsDeleted = false,
                            Oran = 12.96m,
                            SegmentId = 4,
                            StartPrice = 500.00m
                        },
                        new
                        {
                            Id = 53,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 2499.99m,
                            IsDeleted = false,
                            Oran = 10.37m,
                            SegmentId = 4,
                            StartPrice = 1000.00m
                        },
                        new
                        {
                            Id = 54,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 4999.99m,
                            IsDeleted = false,
                            Oran = 9.07m,
                            SegmentId = 4,
                            StartPrice = 2500.00m
                        },
                        new
                        {
                            Id = 55,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 9999.99m,
                            IsDeleted = false,
                            Oran = 8.42m,
                            SegmentId = 4,
                            StartPrice = 5000.00m
                        },
                        new
                        {
                            Id = 56,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 19999.99m,
                            IsDeleted = false,
                            Oran = 7.78m,
                            SegmentId = 4,
                            StartPrice = 10000.00m
                        },
                        new
                        {
                            Id = 57,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 39999.99m,
                            IsDeleted = false,
                            Oran = 6.48m,
                            SegmentId = 4,
                            StartPrice = 20000.00m
                        },
                        new
                        {
                            Id = 58,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 74999.99m,
                            IsDeleted = false,
                            Oran = 5.83m,
                            SegmentId = 4,
                            StartPrice = 40000.00m
                        },
                        new
                        {
                            Id = 59,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 99999.99m,
                            IsDeleted = false,
                            Oran = 5.44m,
                            SegmentId = 4,
                            StartPrice = 75000.00m
                        },
                        new
                        {
                            Id = 60,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 149999.99m,
                            IsDeleted = false,
                            Oran = 5.18m,
                            SegmentId = 4,
                            StartPrice = 100000.00m
                        },
                        new
                        {
                            Id = 61,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 249999.99m,
                            IsDeleted = false,
                            Oran = 3.89m,
                            SegmentId = 4,
                            StartPrice = 150000.00m
                        },
                        new
                        {
                            Id = 62,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 499999.99m,
                            IsDeleted = false,
                            Oran = 3.24m,
                            SegmentId = 4,
                            StartPrice = 250000.00m
                        },
                        new
                        {
                            Id = 63,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 999999.99m,
                            IsDeleted = false,
                            Oran = 2.85m,
                            SegmentId = 4,
                            StartPrice = 500000.00m
                        },
                        new
                        {
                            Id = 64,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 99999999.99m,
                            IsDeleted = false,
                            Oran = 2.59m,
                            SegmentId = 4,
                            StartPrice = 1000000.00m
                        },
                        new
                        {
                            Id = 65,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 49.99m,
                            IsDeleted = false,
                            Oran = 46.66m,
                            SegmentId = 5,
                            StartPrice = 0.00m
                        },
                        new
                        {
                            Id = 66,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 199.99m,
                            IsDeleted = false,
                            Oran = 27.99m,
                            SegmentId = 5,
                            StartPrice = 50.00m
                        },
                        new
                        {
                            Id = 67,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 499.99m,
                            IsDeleted = false,
                            Oran = 21.77m,
                            SegmentId = 5,
                            StartPrice = 200.00m
                        },
                        new
                        {
                            Id = 68,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 999.99m,
                            IsDeleted = false,
                            Oran = 15.55m,
                            SegmentId = 5,
                            StartPrice = 500.00m
                        },
                        new
                        {
                            Id = 69,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 2499.99m,
                            IsDeleted = false,
                            Oran = 12.44m,
                            SegmentId = 5,
                            StartPrice = 1000.00m
                        },
                        new
                        {
                            Id = 70,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 4999.99m,
                            IsDeleted = false,
                            Oran = 10.89m,
                            SegmentId = 5,
                            StartPrice = 2500.00m
                        },
                        new
                        {
                            Id = 71,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 9999.99m,
                            IsDeleted = false,
                            Oran = 10.11m,
                            SegmentId = 5,
                            StartPrice = 5000.00m
                        },
                        new
                        {
                            Id = 72,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 19999.99m,
                            IsDeleted = false,
                            Oran = 9.33m,
                            SegmentId = 5,
                            StartPrice = 10000.00m
                        },
                        new
                        {
                            Id = 73,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 39999.99m,
                            IsDeleted = false,
                            Oran = 7.78m,
                            SegmentId = 5,
                            StartPrice = 20000.00m
                        },
                        new
                        {
                            Id = 74,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 74999.99m,
                            IsDeleted = false,
                            Oran = 7m,
                            SegmentId = 5,
                            StartPrice = 40000.00m
                        },
                        new
                        {
                            Id = 75,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 99999.99m,
                            IsDeleted = false,
                            Oran = 6.53m,
                            SegmentId = 5,
                            StartPrice = 75000.00m
                        },
                        new
                        {
                            Id = 76,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 149999.99m,
                            IsDeleted = false,
                            Oran = 6.22m,
                            SegmentId = 5,
                            StartPrice = 100000.00m
                        },
                        new
                        {
                            Id = 77,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 249999.99m,
                            IsDeleted = false,
                            Oran = 4.67m,
                            SegmentId = 5,
                            StartPrice = 150000.00m
                        },
                        new
                        {
                            Id = 78,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 499999.99m,
                            IsDeleted = false,
                            Oran = 3.89m,
                            SegmentId = 5,
                            StartPrice = 250000.00m
                        },
                        new
                        {
                            Id = 79,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 999999.99m,
                            IsDeleted = false,
                            Oran = 3.42m,
                            SegmentId = 5,
                            StartPrice = 500000.00m
                        },
                        new
                        {
                            Id = 80,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 99999999.99m,
                            IsDeleted = false,
                            Oran = 3.11m,
                            SegmentId = 5,
                            StartPrice = 1000000.00m
                        },
                        new
                        {
                            Id = 81,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 49.99m,
                            IsDeleted = false,
                            Oran = 55.99m,
                            SegmentId = 6,
                            StartPrice = 0.00m
                        },
                        new
                        {
                            Id = 82,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 199.99m,
                            IsDeleted = false,
                            Oran = 33.59m,
                            SegmentId = 6,
                            StartPrice = 50.00m
                        },
                        new
                        {
                            Id = 83,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 499.99m,
                            IsDeleted = false,
                            Oran = 26.13m,
                            SegmentId = 6,
                            StartPrice = 200.00m
                        },
                        new
                        {
                            Id = 84,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 999.99m,
                            IsDeleted = false,
                            Oran = 18.66m,
                            SegmentId = 6,
                            StartPrice = 500.00m
                        },
                        new
                        {
                            Id = 85,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 2499.99m,
                            IsDeleted = false,
                            Oran = 14.93m,
                            SegmentId = 6,
                            StartPrice = 1000.00m
                        },
                        new
                        {
                            Id = 86,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 4999.99m,
                            IsDeleted = false,
                            Oran = 13.06m,
                            SegmentId = 6,
                            StartPrice = 2500.00m
                        },
                        new
                        {
                            Id = 87,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 9999.99m,
                            IsDeleted = false,
                            Oran = 12.13m,
                            SegmentId = 6,
                            StartPrice = 5000.00m
                        },
                        new
                        {
                            Id = 88,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 19999.99m,
                            IsDeleted = false,
                            Oran = 11.2m,
                            SegmentId = 6,
                            StartPrice = 10000.00m
                        },
                        new
                        {
                            Id = 89,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 39999.99m,
                            IsDeleted = false,
                            Oran = 9.33m,
                            SegmentId = 6,
                            StartPrice = 20000.00m
                        },
                        new
                        {
                            Id = 90,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 74999.99m,
                            IsDeleted = false,
                            Oran = 8.4m,
                            SegmentId = 6,
                            StartPrice = 40000.00m
                        },
                        new
                        {
                            Id = 91,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 99999.99m,
                            IsDeleted = false,
                            Oran = 7.84m,
                            SegmentId = 6,
                            StartPrice = 75000.00m
                        },
                        new
                        {
                            Id = 92,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 149999.99m,
                            IsDeleted = false,
                            Oran = 7.46m,
                            SegmentId = 6,
                            StartPrice = 100000.00m
                        },
                        new
                        {
                            Id = 93,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 249999.99m,
                            IsDeleted = false,
                            Oran = 5.6m,
                            SegmentId = 6,
                            StartPrice = 150000.00m
                        },
                        new
                        {
                            Id = 94,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 499999.99m,
                            IsDeleted = false,
                            Oran = 4.67m,
                            SegmentId = 6,
                            StartPrice = 250000.00m
                        },
                        new
                        {
                            Id = 95,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 999999.99m,
                            IsDeleted = false,
                            Oran = 4.11m,
                            SegmentId = 6,
                            StartPrice = 500000.00m
                        },
                        new
                        {
                            Id = 96,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 99999999.99m,
                            IsDeleted = false,
                            Oran = 3.73m,
                            SegmentId = 6,
                            StartPrice = 1000000.00m
                        },
                        new
                        {
                            Id = 97,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 49.99m,
                            IsDeleted = false,
                            Oran = 67.18m,
                            SegmentId = 7,
                            StartPrice = 0.00m
                        },
                        new
                        {
                            Id = 98,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 199.99m,
                            IsDeleted = false,
                            Oran = 40.31m,
                            SegmentId = 7,
                            StartPrice = 50.00m
                        },
                        new
                        {
                            Id = 99,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 499.99m,
                            IsDeleted = false,
                            Oran = 31.35m,
                            SegmentId = 7,
                            StartPrice = 200.00m
                        },
                        new
                        {
                            Id = 100,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 999.99m,
                            IsDeleted = false,
                            Oran = 22.39m,
                            SegmentId = 7,
                            StartPrice = 500.00m
                        },
                        new
                        {
                            Id = 101,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 2499.99m,
                            IsDeleted = false,
                            Oran = 17.92m,
                            SegmentId = 7,
                            StartPrice = 1000.00m
                        },
                        new
                        {
                            Id = 102,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 4999.99m,
                            IsDeleted = false,
                            Oran = 15.68m,
                            SegmentId = 7,
                            StartPrice = 2500.00m
                        },
                        new
                        {
                            Id = 103,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 9999.99m,
                            IsDeleted = false,
                            Oran = 14.56m,
                            SegmentId = 7,
                            StartPrice = 5000.00m
                        },
                        new
                        {
                            Id = 104,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 19999.99m,
                            IsDeleted = false,
                            Oran = 13.44m,
                            SegmentId = 7,
                            StartPrice = 10000.00m
                        },
                        new
                        {
                            Id = 105,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 39999.99m,
                            IsDeleted = false,
                            Oran = 11.2m,
                            SegmentId = 7,
                            StartPrice = 20000.00m
                        },
                        new
                        {
                            Id = 106,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 74999.99m,
                            IsDeleted = false,
                            Oran = 10.08m,
                            SegmentId = 7,
                            StartPrice = 40000.00m
                        },
                        new
                        {
                            Id = 107,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 99999.99m,
                            IsDeleted = false,
                            Oran = 9.41m,
                            SegmentId = 7,
                            StartPrice = 75000.00m
                        },
                        new
                        {
                            Id = 108,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 149999.99m,
                            IsDeleted = false,
                            Oran = 8.96m,
                            SegmentId = 7,
                            StartPrice = 100000.00m
                        },
                        new
                        {
                            Id = 109,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 249999.99m,
                            IsDeleted = false,
                            Oran = 6.72m,
                            SegmentId = 7,
                            StartPrice = 150000.00m
                        },
                        new
                        {
                            Id = 110,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 499999.99m,
                            IsDeleted = false,
                            Oran = 5.6m,
                            SegmentId = 7,
                            StartPrice = 250000.00m
                        },
                        new
                        {
                            Id = 111,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 999999.99m,
                            IsDeleted = false,
                            Oran = 4.93m,
                            SegmentId = 7,
                            StartPrice = 500000.00m
                        },
                        new
                        {
                            Id = 112,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 99999999.99m,
                            IsDeleted = false,
                            Oran = 4.48m,
                            SegmentId = 7,
                            StartPrice = 1000000.00m
                        },
                        new
                        {
                            Id = 113,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 49.99m,
                            IsDeleted = false,
                            Oran = 80.62m,
                            SegmentId = 8,
                            StartPrice = 0.00m
                        },
                        new
                        {
                            Id = 114,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 199.99m,
                            IsDeleted = false,
                            Oran = 48.37m,
                            SegmentId = 8,
                            StartPrice = 50.00m
                        },
                        new
                        {
                            Id = 115,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 499.99m,
                            IsDeleted = false,
                            Oran = 37.62m,
                            SegmentId = 8,
                            StartPrice = 200.00m
                        },
                        new
                        {
                            Id = 116,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 999.99m,
                            IsDeleted = false,
                            Oran = 26.87m,
                            SegmentId = 8,
                            StartPrice = 500.00m
                        },
                        new
                        {
                            Id = 117,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 2499.99m,
                            IsDeleted = false,
                            Oran = 21.5m,
                            SegmentId = 8,
                            StartPrice = 1000.00m
                        },
                        new
                        {
                            Id = 118,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 4999.99m,
                            IsDeleted = false,
                            Oran = 18.81m,
                            SegmentId = 8,
                            StartPrice = 2500.00m
                        },
                        new
                        {
                            Id = 119,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 9999.99m,
                            IsDeleted = false,
                            Oran = 17.47m,
                            SegmentId = 8,
                            StartPrice = 5000.00m
                        },
                        new
                        {
                            Id = 120,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 19999.99m,
                            IsDeleted = false,
                            Oran = 16.12m,
                            SegmentId = 8,
                            StartPrice = 10000.00m
                        },
                        new
                        {
                            Id = 121,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 39999.99m,
                            IsDeleted = false,
                            Oran = 13.44m,
                            SegmentId = 8,
                            StartPrice = 20000.00m
                        },
                        new
                        {
                            Id = 122,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 74999.99m,
                            IsDeleted = false,
                            Oran = 12.09m,
                            SegmentId = 8,
                            StartPrice = 40000.00m
                        },
                        new
                        {
                            Id = 123,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 99999.99m,
                            IsDeleted = false,
                            Oran = 11.29m,
                            SegmentId = 8,
                            StartPrice = 75000.00m
                        },
                        new
                        {
                            Id = 124,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 149999.99m,
                            IsDeleted = false,
                            Oran = 10.75m,
                            SegmentId = 8,
                            StartPrice = 100000.00m
                        },
                        new
                        {
                            Id = 125,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 249999.99m,
                            IsDeleted = false,
                            Oran = 8.06m,
                            SegmentId = 8,
                            StartPrice = 150000.00m
                        },
                        new
                        {
                            Id = 126,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 499999.99m,
                            IsDeleted = false,
                            Oran = 6.72m,
                            SegmentId = 8,
                            StartPrice = 250000.00m
                        },
                        new
                        {
                            Id = 127,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 999999.99m,
                            IsDeleted = false,
                            Oran = 5.91m,
                            SegmentId = 8,
                            StartPrice = 500000.00m
                        },
                        new
                        {
                            Id = 128,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 99999999.99m,
                            IsDeleted = false,
                            Oran = 5.37m,
                            SegmentId = 8,
                            StartPrice = 1000000.00m
                        },
                        new
                        {
                            Id = 129,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 49.99m,
                            IsDeleted = false,
                            Oran = 96.75m,
                            SegmentId = 9,
                            StartPrice = 0.00m
                        },
                        new
                        {
                            Id = 130,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 199.99m,
                            IsDeleted = false,
                            Oran = 58.05m,
                            SegmentId = 9,
                            StartPrice = 50.00m
                        },
                        new
                        {
                            Id = 131,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 499.99m,
                            IsDeleted = false,
                            Oran = 45.15m,
                            SegmentId = 9,
                            StartPrice = 200.00m
                        },
                        new
                        {
                            Id = 132,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 999.99m,
                            IsDeleted = false,
                            Oran = 32.25m,
                            SegmentId = 9,
                            StartPrice = 500.00m
                        },
                        new
                        {
                            Id = 133,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 2499.99m,
                            IsDeleted = false,
                            Oran = 25.8m,
                            SegmentId = 9,
                            StartPrice = 1000.00m
                        },
                        new
                        {
                            Id = 134,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 4999.99m,
                            IsDeleted = false,
                            Oran = 22.57m,
                            SegmentId = 9,
                            StartPrice = 2500.00m
                        },
                        new
                        {
                            Id = 135,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 9999.99m,
                            IsDeleted = false,
                            Oran = 20.96m,
                            SegmentId = 9,
                            StartPrice = 5000.00m
                        },
                        new
                        {
                            Id = 136,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 19999.99m,
                            IsDeleted = false,
                            Oran = 19.35m,
                            SegmentId = 9,
                            StartPrice = 10000.00m
                        },
                        new
                        {
                            Id = 137,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 39999.99m,
                            IsDeleted = false,
                            Oran = 16.12m,
                            SegmentId = 9,
                            StartPrice = 20000.00m
                        },
                        new
                        {
                            Id = 138,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 74999.99m,
                            IsDeleted = false,
                            Oran = 14.51m,
                            SegmentId = 9,
                            StartPrice = 40000.00m
                        },
                        new
                        {
                            Id = 139,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 99999.99m,
                            IsDeleted = false,
                            Oran = 13.54m,
                            SegmentId = 9,
                            StartPrice = 75000.00m
                        },
                        new
                        {
                            Id = 140,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 149999.99m,
                            IsDeleted = false,
                            Oran = 12.9m,
                            SegmentId = 9,
                            StartPrice = 100000.00m
                        },
                        new
                        {
                            Id = 141,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 249999.99m,
                            IsDeleted = false,
                            Oran = 9.67m,
                            SegmentId = 9,
                            StartPrice = 150000.00m
                        },
                        new
                        {
                            Id = 142,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 499999.99m,
                            IsDeleted = false,
                            Oran = 8.06m,
                            SegmentId = 9,
                            StartPrice = 250000.00m
                        },
                        new
                        {
                            Id = 143,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 999999.99m,
                            IsDeleted = false,
                            Oran = 7m,
                            SegmentId = 9,
                            StartPrice = 500000.00m
                        },
                        new
                        {
                            Id = 144,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 99999999.99m,
                            IsDeleted = false,
                            Oran = 6.45m,
                            SegmentId = 9,
                            StartPrice = 1000000.00m
                        },
                        new
                        {
                            Id = 145,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 49.99m,
                            IsDeleted = false,
                            Oran = 116.1m,
                            SegmentId = 10,
                            StartPrice = 0.00m
                        },
                        new
                        {
                            Id = 146,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 199.99m,
                            IsDeleted = false,
                            Oran = 72.56m,
                            SegmentId = 10,
                            StartPrice = 50.00m
                        },
                        new
                        {
                            Id = 147,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 499.99m,
                            IsDeleted = false,
                            Oran = 58.69m,
                            SegmentId = 10,
                            StartPrice = 200.00m
                        },
                        new
                        {
                            Id = 148,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 999.99m,
                            IsDeleted = false,
                            Oran = 43.54m,
                            SegmentId = 10,
                            StartPrice = 500.00m
                        },
                        new
                        {
                            Id = 149,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 2499.99m,
                            IsDeleted = false,
                            Oran = 36.12m,
                            SegmentId = 10,
                            StartPrice = 1000.00m
                        },
                        new
                        {
                            Id = 150,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 4999.99m,
                            IsDeleted = false,
                            Oran = 32.73m,
                            SegmentId = 10,
                            StartPrice = 2500.00m
                        },
                        new
                        {
                            Id = 151,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 9999.99m,
                            IsDeleted = false,
                            Oran = 31.44m,
                            SegmentId = 10,
                            StartPrice = 5000.00m
                        },
                        new
                        {
                            Id = 152,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 19999.99m,
                            IsDeleted = false,
                            Oran = 29.99m,
                            SegmentId = 10,
                            StartPrice = 10000.00m
                        },
                        new
                        {
                            Id = 153,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 39999.99m,
                            IsDeleted = false,
                            Oran = 25.8m,
                            SegmentId = 10,
                            StartPrice = 20000.00m
                        },
                        new
                        {
                            Id = 154,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 74999.99m,
                            IsDeleted = false,
                            Oran = 23.94m,
                            SegmentId = 10,
                            StartPrice = 40000.00m
                        },
                        new
                        {
                            Id = 155,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 99999.99m,
                            IsDeleted = false,
                            Oran = 23.03m,
                            SegmentId = 10,
                            StartPrice = 75000.00m
                        },
                        new
                        {
                            Id = 156,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 149999.99m,
                            IsDeleted = false,
                            Oran = 22.57m,
                            SegmentId = 10,
                            StartPrice = 100000.00m
                        },
                        new
                        {
                            Id = 157,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 249999.99m,
                            IsDeleted = false,
                            Oran = 17.41m,
                            SegmentId = 10,
                            StartPrice = 150000.00m
                        },
                        new
                        {
                            Id = 158,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 499999.99m,
                            IsDeleted = false,
                            Oran = 14.91m,
                            SegmentId = 10,
                            StartPrice = 250000.00m
                        },
                        new
                        {
                            Id = 159,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 999999.99m,
                            IsDeleted = false,
                            Oran = 13.48m,
                            SegmentId = 10,
                            StartPrice = 500000.00m
                        },
                        new
                        {
                            Id = 160,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 1,
                            EndPrice = 99999999.99m,
                            IsDeleted = false,
                            Oran = 12.58m,
                            SegmentId = 10,
                            StartPrice = 1000000.00m
                        },
                        new
                        {
                            Id = 161,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 49.99m,
                            IsDeleted = false,
                            Oran = 15m,
                            SegmentId = 1,
                            StartPrice = 0.00m
                        },
                        new
                        {
                            Id = 162,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 199.99m,
                            IsDeleted = false,
                            Oran = 9m,
                            SegmentId = 1,
                            StartPrice = 50.00m
                        },
                        new
                        {
                            Id = 163,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 499.99m,
                            IsDeleted = false,
                            Oran = 7m,
                            SegmentId = 1,
                            StartPrice = 200.00m
                        },
                        new
                        {
                            Id = 164,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 999.99m,
                            IsDeleted = false,
                            Oran = 5m,
                            SegmentId = 1,
                            StartPrice = 500.00m
                        },
                        new
                        {
                            Id = 165,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 2499.99m,
                            IsDeleted = false,
                            Oran = 4m,
                            SegmentId = 1,
                            StartPrice = 1000.00m
                        },
                        new
                        {
                            Id = 166,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 4999.99m,
                            IsDeleted = false,
                            Oran = 3.5m,
                            SegmentId = 1,
                            StartPrice = 2500.00m
                        },
                        new
                        {
                            Id = 167,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 9999.99m,
                            IsDeleted = false,
                            Oran = 3.25m,
                            SegmentId = 1,
                            StartPrice = 5000.00m
                        },
                        new
                        {
                            Id = 168,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 19999.99m,
                            IsDeleted = false,
                            Oran = 3m,
                            SegmentId = 1,
                            StartPrice = 10000.00m
                        },
                        new
                        {
                            Id = 169,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 39999.99m,
                            IsDeleted = false,
                            Oran = 2.5m,
                            SegmentId = 1,
                            StartPrice = 20000.00m
                        },
                        new
                        {
                            Id = 170,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 74999.99m,
                            IsDeleted = false,
                            Oran = 2.25m,
                            SegmentId = 1,
                            StartPrice = 40000.00m
                        },
                        new
                        {
                            Id = 171,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 99999.99m,
                            IsDeleted = false,
                            Oran = 2.1m,
                            SegmentId = 1,
                            StartPrice = 75000.00m
                        },
                        new
                        {
                            Id = 172,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 149999.99m,
                            IsDeleted = false,
                            Oran = 2m,
                            SegmentId = 1,
                            StartPrice = 100000.00m
                        },
                        new
                        {
                            Id = 173,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 249999.99m,
                            IsDeleted = false,
                            Oran = 1.5m,
                            SegmentId = 1,
                            StartPrice = 150000.00m
                        },
                        new
                        {
                            Id = 174,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 499999.99m,
                            IsDeleted = false,
                            Oran = 1.25m,
                            SegmentId = 1,
                            StartPrice = 250000.00m
                        },
                        new
                        {
                            Id = 175,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 999999.99m,
                            IsDeleted = false,
                            Oran = 1.1m,
                            SegmentId = 1,
                            StartPrice = 500000.00m
                        },
                        new
                        {
                            Id = 176,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 99999999.99m,
                            IsDeleted = false,
                            Oran = 1m,
                            SegmentId = 1,
                            StartPrice = 1000000.00m
                        },
                        new
                        {
                            Id = 177,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 49.99m,
                            IsDeleted = false,
                            Oran = 18m,
                            SegmentId = 2,
                            StartPrice = 0.00m
                        },
                        new
                        {
                            Id = 178,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 199.99m,
                            IsDeleted = false,
                            Oran = 10.8m,
                            SegmentId = 2,
                            StartPrice = 50.00m
                        },
                        new
                        {
                            Id = 179,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 499.99m,
                            IsDeleted = false,
                            Oran = 8.4m,
                            SegmentId = 2,
                            StartPrice = 200.00m
                        },
                        new
                        {
                            Id = 180,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 999.99m,
                            IsDeleted = false,
                            Oran = 6m,
                            SegmentId = 2,
                            StartPrice = 500.00m
                        },
                        new
                        {
                            Id = 181,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 2499.99m,
                            IsDeleted = false,
                            Oran = 4.8m,
                            SegmentId = 2,
                            StartPrice = 1000.00m
                        },
                        new
                        {
                            Id = 182,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 4999.99m,
                            IsDeleted = false,
                            Oran = 4.2m,
                            SegmentId = 2,
                            StartPrice = 2500.00m
                        },
                        new
                        {
                            Id = 183,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 9999.99m,
                            IsDeleted = false,
                            Oran = 3.9m,
                            SegmentId = 2,
                            StartPrice = 5000.00m
                        },
                        new
                        {
                            Id = 184,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 19999.99m,
                            IsDeleted = false,
                            Oran = 3.6m,
                            SegmentId = 2,
                            StartPrice = 10000.00m
                        },
                        new
                        {
                            Id = 185,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 39999.99m,
                            IsDeleted = false,
                            Oran = 3m,
                            SegmentId = 2,
                            StartPrice = 20000.00m
                        },
                        new
                        {
                            Id = 186,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 74999.99m,
                            IsDeleted = false,
                            Oran = 2.7m,
                            SegmentId = 2,
                            StartPrice = 40000.00m
                        },
                        new
                        {
                            Id = 187,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 99999.99m,
                            IsDeleted = false,
                            Oran = 2.52m,
                            SegmentId = 2,
                            StartPrice = 75000.00m
                        },
                        new
                        {
                            Id = 188,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 149999.99m,
                            IsDeleted = false,
                            Oran = 2.4m,
                            SegmentId = 2,
                            StartPrice = 100000.00m
                        },
                        new
                        {
                            Id = 189,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 249999.99m,
                            IsDeleted = false,
                            Oran = 1.8m,
                            SegmentId = 2,
                            StartPrice = 150000.00m
                        },
                        new
                        {
                            Id = 190,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 499999.99m,
                            IsDeleted = false,
                            Oran = 1.5m,
                            SegmentId = 2,
                            StartPrice = 250000.00m
                        },
                        new
                        {
                            Id = 191,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 999999.99m,
                            IsDeleted = false,
                            Oran = 1.32m,
                            SegmentId = 2,
                            StartPrice = 500000.00m
                        },
                        new
                        {
                            Id = 192,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 99999999.99m,
                            IsDeleted = false,
                            Oran = 1.2m,
                            SegmentId = 2,
                            StartPrice = 1000000.00m
                        },
                        new
                        {
                            Id = 193,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 49.99m,
                            IsDeleted = false,
                            Oran = 21.6m,
                            SegmentId = 3,
                            StartPrice = 0.00m
                        },
                        new
                        {
                            Id = 194,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 199.99m,
                            IsDeleted = false,
                            Oran = 12.96m,
                            SegmentId = 3,
                            StartPrice = 50.00m
                        },
                        new
                        {
                            Id = 195,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 499.99m,
                            IsDeleted = false,
                            Oran = 10.08m,
                            SegmentId = 3,
                            StartPrice = 200.00m
                        },
                        new
                        {
                            Id = 196,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 999.99m,
                            IsDeleted = false,
                            Oran = 7.2m,
                            SegmentId = 3,
                            StartPrice = 500.00m
                        },
                        new
                        {
                            Id = 197,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 2499.99m,
                            IsDeleted = false,
                            Oran = 5.76m,
                            SegmentId = 3,
                            StartPrice = 1000.00m
                        },
                        new
                        {
                            Id = 198,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 4999.99m,
                            IsDeleted = false,
                            Oran = 5.04m,
                            SegmentId = 3,
                            StartPrice = 2500.00m
                        },
                        new
                        {
                            Id = 199,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 9999.99m,
                            IsDeleted = false,
                            Oran = 4.68m,
                            SegmentId = 3,
                            StartPrice = 5000.00m
                        },
                        new
                        {
                            Id = 200,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 19999.99m,
                            IsDeleted = false,
                            Oran = 4.32m,
                            SegmentId = 3,
                            StartPrice = 10000.00m
                        },
                        new
                        {
                            Id = 201,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 39999.99m,
                            IsDeleted = false,
                            Oran = 3.6m,
                            SegmentId = 3,
                            StartPrice = 20000.00m
                        },
                        new
                        {
                            Id = 202,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 74999.99m,
                            IsDeleted = false,
                            Oran = 3.24m,
                            SegmentId = 3,
                            StartPrice = 40000.00m
                        },
                        new
                        {
                            Id = 203,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 99999.99m,
                            IsDeleted = false,
                            Oran = 3.02m,
                            SegmentId = 3,
                            StartPrice = 75000.00m
                        },
                        new
                        {
                            Id = 204,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 149999.99m,
                            IsDeleted = false,
                            Oran = 2.88m,
                            SegmentId = 3,
                            StartPrice = 100000.00m
                        },
                        new
                        {
                            Id = 205,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 249999.99m,
                            IsDeleted = false,
                            Oran = 2.16m,
                            SegmentId = 3,
                            StartPrice = 150000.00m
                        },
                        new
                        {
                            Id = 206,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 499999.99m,
                            IsDeleted = false,
                            Oran = 1.8m,
                            SegmentId = 3,
                            StartPrice = 250000.00m
                        },
                        new
                        {
                            Id = 207,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 999999.99m,
                            IsDeleted = false,
                            Oran = 1.58m,
                            SegmentId = 3,
                            StartPrice = 500000.00m
                        },
                        new
                        {
                            Id = 208,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 99999999.99m,
                            IsDeleted = false,
                            Oran = 1.44m,
                            SegmentId = 3,
                            StartPrice = 1000000.00m
                        },
                        new
                        {
                            Id = 209,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 49.99m,
                            IsDeleted = false,
                            Oran = 25.92m,
                            SegmentId = 4,
                            StartPrice = 0.00m
                        },
                        new
                        {
                            Id = 210,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 199.99m,
                            IsDeleted = false,
                            Oran = 15.55m,
                            SegmentId = 4,
                            StartPrice = 50.00m
                        },
                        new
                        {
                            Id = 211,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 499.99m,
                            IsDeleted = false,
                            Oran = 12.1m,
                            SegmentId = 4,
                            StartPrice = 200.00m
                        },
                        new
                        {
                            Id = 212,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 999.99m,
                            IsDeleted = false,
                            Oran = 8.64m,
                            SegmentId = 4,
                            StartPrice = 500.00m
                        },
                        new
                        {
                            Id = 213,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 2499.99m,
                            IsDeleted = false,
                            Oran = 6.91m,
                            SegmentId = 4,
                            StartPrice = 1000.00m
                        },
                        new
                        {
                            Id = 214,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 4999.99m,
                            IsDeleted = false,
                            Oran = 6.05m,
                            SegmentId = 4,
                            StartPrice = 2500.00m
                        },
                        new
                        {
                            Id = 215,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 9999.99m,
                            IsDeleted = false,
                            Oran = 5.62m,
                            SegmentId = 4,
                            StartPrice = 5000.00m
                        },
                        new
                        {
                            Id = 216,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 19999.99m,
                            IsDeleted = false,
                            Oran = 5.18m,
                            SegmentId = 4,
                            StartPrice = 10000.00m
                        },
                        new
                        {
                            Id = 217,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 39999.99m,
                            IsDeleted = false,
                            Oran = 4.32m,
                            SegmentId = 4,
                            StartPrice = 20000.00m
                        },
                        new
                        {
                            Id = 218,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 74999.99m,
                            IsDeleted = false,
                            Oran = 3.89m,
                            SegmentId = 4,
                            StartPrice = 40000.00m
                        },
                        new
                        {
                            Id = 219,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 99999.99m,
                            IsDeleted = false,
                            Oran = 3.63m,
                            SegmentId = 4,
                            StartPrice = 75000.00m
                        },
                        new
                        {
                            Id = 220,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 149999.99m,
                            IsDeleted = false,
                            Oran = 3.46m,
                            SegmentId = 4,
                            StartPrice = 100000.00m
                        },
                        new
                        {
                            Id = 221,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 249999.99m,
                            IsDeleted = false,
                            Oran = 2.59m,
                            SegmentId = 4,
                            StartPrice = 150000.00m
                        },
                        new
                        {
                            Id = 222,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 499999.99m,
                            IsDeleted = false,
                            Oran = 2.16m,
                            SegmentId = 4,
                            StartPrice = 250000.00m
                        },
                        new
                        {
                            Id = 223,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 999999.99m,
                            IsDeleted = false,
                            Oran = 1.9m,
                            SegmentId = 4,
                            StartPrice = 500000.00m
                        },
                        new
                        {
                            Id = 224,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 99999999.99m,
                            IsDeleted = false,
                            Oran = 1.73m,
                            SegmentId = 4,
                            StartPrice = 1000000.00m
                        },
                        new
                        {
                            Id = 225,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 49.99m,
                            IsDeleted = false,
                            Oran = 31.1m,
                            SegmentId = 5,
                            StartPrice = 0.00m
                        },
                        new
                        {
                            Id = 226,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 199.99m,
                            IsDeleted = false,
                            Oran = 18.66m,
                            SegmentId = 5,
                            StartPrice = 50.00m
                        },
                        new
                        {
                            Id = 227,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 499.99m,
                            IsDeleted = false,
                            Oran = 14.52m,
                            SegmentId = 5,
                            StartPrice = 200.00m
                        },
                        new
                        {
                            Id = 228,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 999.99m,
                            IsDeleted = false,
                            Oran = 10.37m,
                            SegmentId = 5,
                            StartPrice = 500.00m
                        },
                        new
                        {
                            Id = 229,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 2499.99m,
                            IsDeleted = false,
                            Oran = 8.29m,
                            SegmentId = 5,
                            StartPrice = 1000.00m
                        },
                        new
                        {
                            Id = 230,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 4999.99m,
                            IsDeleted = false,
                            Oran = 7.26m,
                            SegmentId = 5,
                            StartPrice = 2500.00m
                        },
                        new
                        {
                            Id = 231,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 9999.99m,
                            IsDeleted = false,
                            Oran = 6.74m,
                            SegmentId = 5,
                            StartPrice = 5000.00m
                        },
                        new
                        {
                            Id = 232,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 19999.99m,
                            IsDeleted = false,
                            Oran = 6.22m,
                            SegmentId = 5,
                            StartPrice = 10000.00m
                        },
                        new
                        {
                            Id = 233,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 39999.99m,
                            IsDeleted = false,
                            Oran = 5.18m,
                            SegmentId = 5,
                            StartPrice = 20000.00m
                        },
                        new
                        {
                            Id = 234,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 74999.99m,
                            IsDeleted = false,
                            Oran = 4.67m,
                            SegmentId = 5,
                            StartPrice = 40000.00m
                        },
                        new
                        {
                            Id = 235,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 99999.99m,
                            IsDeleted = false,
                            Oran = 4.35m,
                            SegmentId = 5,
                            StartPrice = 75000.00m
                        },
                        new
                        {
                            Id = 236,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 149999.99m,
                            IsDeleted = false,
                            Oran = 4.15m,
                            SegmentId = 5,
                            StartPrice = 100000.00m
                        },
                        new
                        {
                            Id = 237,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 249999.99m,
                            IsDeleted = false,
                            Oran = 3.11m,
                            SegmentId = 5,
                            StartPrice = 150000.00m
                        },
                        new
                        {
                            Id = 238,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 499999.99m,
                            IsDeleted = false,
                            Oran = 2.59m,
                            SegmentId = 5,
                            StartPrice = 250000.00m
                        },
                        new
                        {
                            Id = 239,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 999999.99m,
                            IsDeleted = false,
                            Oran = 2.28m,
                            SegmentId = 5,
                            StartPrice = 500000.00m
                        },
                        new
                        {
                            Id = 240,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 99999999.99m,
                            IsDeleted = false,
                            Oran = 2.07m,
                            SegmentId = 5,
                            StartPrice = 1000000.00m
                        },
                        new
                        {
                            Id = 241,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 49.99m,
                            IsDeleted = false,
                            Oran = 37.32m,
                            SegmentId = 6,
                            StartPrice = 0.00m
                        },
                        new
                        {
                            Id = 242,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 199.99m,
                            IsDeleted = false,
                            Oran = 22.39m,
                            SegmentId = 6,
                            StartPrice = 50.00m
                        },
                        new
                        {
                            Id = 243,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 499.99m,
                            IsDeleted = false,
                            Oran = 17.42m,
                            SegmentId = 6,
                            StartPrice = 200.00m
                        },
                        new
                        {
                            Id = 244,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 999.99m,
                            IsDeleted = false,
                            Oran = 12.44m,
                            SegmentId = 6,
                            StartPrice = 500.00m
                        },
                        new
                        {
                            Id = 245,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 2499.99m,
                            IsDeleted = false,
                            Oran = 9.95m,
                            SegmentId = 6,
                            StartPrice = 1000.00m
                        },
                        new
                        {
                            Id = 246,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 4999.99m,
                            IsDeleted = false,
                            Oran = 8.71m,
                            SegmentId = 6,
                            StartPrice = 2500.00m
                        },
                        new
                        {
                            Id = 247,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 9999.99m,
                            IsDeleted = false,
                            Oran = 8.09m,
                            SegmentId = 6,
                            StartPrice = 5000.00m
                        },
                        new
                        {
                            Id = 248,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 19999.99m,
                            IsDeleted = false,
                            Oran = 7.46m,
                            SegmentId = 6,
                            StartPrice = 10000.00m
                        },
                        new
                        {
                            Id = 249,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 39999.99m,
                            IsDeleted = false,
                            Oran = 6.22m,
                            SegmentId = 6,
                            StartPrice = 20000.00m
                        },
                        new
                        {
                            Id = 250,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 74999.99m,
                            IsDeleted = false,
                            Oran = 5.6m,
                            SegmentId = 6,
                            StartPrice = 40000.00m
                        },
                        new
                        {
                            Id = 251,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 99999.99m,
                            IsDeleted = false,
                            Oran = 5.23m,
                            SegmentId = 6,
                            StartPrice = 75000.00m
                        },
                        new
                        {
                            Id = 252,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 149999.99m,
                            IsDeleted = false,
                            Oran = 4.98m,
                            SegmentId = 6,
                            StartPrice = 100000.00m
                        },
                        new
                        {
                            Id = 253,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 249999.99m,
                            IsDeleted = false,
                            Oran = 3.73m,
                            SegmentId = 6,
                            StartPrice = 150000.00m
                        },
                        new
                        {
                            Id = 254,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 499999.99m,
                            IsDeleted = false,
                            Oran = 3.11m,
                            SegmentId = 6,
                            StartPrice = 250000.00m
                        },
                        new
                        {
                            Id = 255,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 999999.99m,
                            IsDeleted = false,
                            Oran = 2.74m,
                            SegmentId = 6,
                            StartPrice = 500000.00m
                        },
                        new
                        {
                            Id = 256,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 99999999.99m,
                            IsDeleted = false,
                            Oran = 2.49m,
                            SegmentId = 6,
                            StartPrice = 1000000.00m
                        },
                        new
                        {
                            Id = 257,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 49.99m,
                            IsDeleted = false,
                            Oran = 44.79m,
                            SegmentId = 7,
                            StartPrice = 0.00m
                        },
                        new
                        {
                            Id = 258,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 199.99m,
                            IsDeleted = false,
                            Oran = 26.87m,
                            SegmentId = 7,
                            StartPrice = 50.00m
                        },
                        new
                        {
                            Id = 259,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 499.99m,
                            IsDeleted = false,
                            Oran = 20.9m,
                            SegmentId = 7,
                            StartPrice = 200.00m
                        },
                        new
                        {
                            Id = 260,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 999.99m,
                            IsDeleted = false,
                            Oran = 14.93m,
                            SegmentId = 7,
                            StartPrice = 500.00m
                        },
                        new
                        {
                            Id = 261,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 2499.99m,
                            IsDeleted = false,
                            Oran = 11.94m,
                            SegmentId = 7,
                            StartPrice = 1000.00m
                        },
                        new
                        {
                            Id = 262,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 4999.99m,
                            IsDeleted = false,
                            Oran = 10.45m,
                            SegmentId = 7,
                            StartPrice = 2500.00m
                        },
                        new
                        {
                            Id = 263,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 9999.99m,
                            IsDeleted = false,
                            Oran = 9.7m,
                            SegmentId = 7,
                            StartPrice = 5000.00m
                        },
                        new
                        {
                            Id = 264,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 19999.99m,
                            IsDeleted = false,
                            Oran = 8.96m,
                            SegmentId = 7,
                            StartPrice = 10000.00m
                        },
                        new
                        {
                            Id = 265,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 39999.99m,
                            IsDeleted = false,
                            Oran = 7.46m,
                            SegmentId = 7,
                            StartPrice = 20000.00m
                        },
                        new
                        {
                            Id = 266,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 74999.99m,
                            IsDeleted = false,
                            Oran = 6.72m,
                            SegmentId = 7,
                            StartPrice = 40000.00m
                        },
                        new
                        {
                            Id = 267,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 99999.99m,
                            IsDeleted = false,
                            Oran = 6.27m,
                            SegmentId = 7,
                            StartPrice = 75000.00m
                        },
                        new
                        {
                            Id = 268,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 149999.99m,
                            IsDeleted = false,
                            Oran = 5.97m,
                            SegmentId = 7,
                            StartPrice = 100000.00m
                        },
                        new
                        {
                            Id = 269,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 249999.99m,
                            IsDeleted = false,
                            Oran = 4.48m,
                            SegmentId = 7,
                            StartPrice = 150000.00m
                        },
                        new
                        {
                            Id = 270,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 499999.99m,
                            IsDeleted = false,
                            Oran = 3.73m,
                            SegmentId = 7,
                            StartPrice = 250000.00m
                        },
                        new
                        {
                            Id = 271,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 999999.99m,
                            IsDeleted = false,
                            Oran = 3.28m,
                            SegmentId = 7,
                            StartPrice = 500000.00m
                        },
                        new
                        {
                            Id = 272,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 99999999.99m,
                            IsDeleted = false,
                            Oran = 2.99m,
                            SegmentId = 7,
                            StartPrice = 1000000.00m
                        },
                        new
                        {
                            Id = 273,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 49.99m,
                            IsDeleted = false,
                            Oran = 53.75m,
                            SegmentId = 8,
                            StartPrice = 0.00m
                        },
                        new
                        {
                            Id = 274,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 199.99m,
                            IsDeleted = false,
                            Oran = 32.25m,
                            SegmentId = 8,
                            StartPrice = 50.00m
                        },
                        new
                        {
                            Id = 275,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 499.99m,
                            IsDeleted = false,
                            Oran = 25.08m,
                            SegmentId = 8,
                            StartPrice = 200.00m
                        },
                        new
                        {
                            Id = 276,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 999.99m,
                            IsDeleted = false,
                            Oran = 17.92m,
                            SegmentId = 8,
                            StartPrice = 500.00m
                        },
                        new
                        {
                            Id = 277,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 2499.99m,
                            IsDeleted = false,
                            Oran = 14.33m,
                            SegmentId = 8,
                            StartPrice = 1000.00m
                        },
                        new
                        {
                            Id = 278,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 4999.99m,
                            IsDeleted = false,
                            Oran = 12.54m,
                            SegmentId = 8,
                            StartPrice = 2500.00m
                        },
                        new
                        {
                            Id = 279,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 9999.99m,
                            IsDeleted = false,
                            Oran = 11.65m,
                            SegmentId = 8,
                            StartPrice = 5000.00m
                        },
                        new
                        {
                            Id = 280,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 19999.99m,
                            IsDeleted = false,
                            Oran = 10.75m,
                            SegmentId = 8,
                            StartPrice = 10000.00m
                        },
                        new
                        {
                            Id = 281,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 39999.99m,
                            IsDeleted = false,
                            Oran = 8.96m,
                            SegmentId = 8,
                            StartPrice = 20000.00m
                        },
                        new
                        {
                            Id = 282,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 74999.99m,
                            IsDeleted = false,
                            Oran = 8.06m,
                            SegmentId = 8,
                            StartPrice = 40000.00m
                        },
                        new
                        {
                            Id = 283,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 99999.99m,
                            IsDeleted = false,
                            Oran = 7.52m,
                            SegmentId = 8,
                            StartPrice = 75000.00m
                        },
                        new
                        {
                            Id = 284,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 149999.99m,
                            IsDeleted = false,
                            Oran = 7.17m,
                            SegmentId = 8,
                            StartPrice = 100000.00m
                        },
                        new
                        {
                            Id = 285,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 249999.99m,
                            IsDeleted = false,
                            Oran = 5.37m,
                            SegmentId = 8,
                            StartPrice = 150000.00m
                        },
                        new
                        {
                            Id = 286,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 499999.99m,
                            IsDeleted = false,
                            Oran = 4.48m,
                            SegmentId = 8,
                            StartPrice = 250000.00m
                        },
                        new
                        {
                            Id = 287,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 999999.99m,
                            IsDeleted = false,
                            Oran = 3.94m,
                            SegmentId = 8,
                            StartPrice = 500000.00m
                        },
                        new
                        {
                            Id = 288,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 99999999.99m,
                            IsDeleted = false,
                            Oran = 3.58m,
                            SegmentId = 8,
                            StartPrice = 1000000.00m
                        },
                        new
                        {
                            Id = 289,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 49.99m,
                            IsDeleted = false,
                            Oran = 64.5m,
                            SegmentId = 9,
                            StartPrice = 0.00m
                        },
                        new
                        {
                            Id = 290,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 199.99m,
                            IsDeleted = false,
                            Oran = 38.7m,
                            SegmentId = 9,
                            StartPrice = 50.00m
                        },
                        new
                        {
                            Id = 291,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 499.99m,
                            IsDeleted = false,
                            Oran = 30.1m,
                            SegmentId = 9,
                            StartPrice = 200.00m
                        },
                        new
                        {
                            Id = 292,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 999.99m,
                            IsDeleted = false,
                            Oran = 21.5m,
                            SegmentId = 9,
                            StartPrice = 500.00m
                        },
                        new
                        {
                            Id = 293,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 2499.99m,
                            IsDeleted = false,
                            Oran = 17.2m,
                            SegmentId = 9,
                            StartPrice = 1000.00m
                        },
                        new
                        {
                            Id = 294,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 4999.99m,
                            IsDeleted = false,
                            Oran = 15.05m,
                            SegmentId = 9,
                            StartPrice = 2500.00m
                        },
                        new
                        {
                            Id = 295,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 9999.99m,
                            IsDeleted = false,
                            Oran = 13.97m,
                            SegmentId = 9,
                            StartPrice = 5000.00m
                        },
                        new
                        {
                            Id = 296,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 19999.99m,
                            IsDeleted = false,
                            Oran = 12.9m,
                            SegmentId = 9,
                            StartPrice = 10000.00m
                        },
                        new
                        {
                            Id = 297,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 39999.99m,
                            IsDeleted = false,
                            Oran = 10.75m,
                            SegmentId = 9,
                            StartPrice = 20000.00m
                        },
                        new
                        {
                            Id = 298,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 74999.99m,
                            IsDeleted = false,
                            Oran = 9.67m,
                            SegmentId = 9,
                            StartPrice = 40000.00m
                        },
                        new
                        {
                            Id = 299,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 99999.99m,
                            IsDeleted = false,
                            Oran = 9.03m,
                            SegmentId = 9,
                            StartPrice = 75000.00m
                        },
                        new
                        {
                            Id = 300,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 149999.99m,
                            IsDeleted = false,
                            Oran = 8.6m,
                            SegmentId = 9,
                            StartPrice = 100000.00m
                        },
                        new
                        {
                            Id = 301,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 249999.99m,
                            IsDeleted = false,
                            Oran = 6.45m,
                            SegmentId = 9,
                            StartPrice = 150000.00m
                        },
                        new
                        {
                            Id = 302,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 499999.99m,
                            IsDeleted = false,
                            Oran = 5.37m,
                            SegmentId = 9,
                            StartPrice = 250000.00m
                        },
                        new
                        {
                            Id = 303,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 999999.99m,
                            IsDeleted = false,
                            Oran = 4.73m,
                            SegmentId = 9,
                            StartPrice = 500000.00m
                        },
                        new
                        {
                            Id = 304,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 99999999.99m,
                            IsDeleted = false,
                            Oran = 4.3m,
                            SegmentId = 9,
                            StartPrice = 1000000.00m
                        },
                        new
                        {
                            Id = 305,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 49.99m,
                            IsDeleted = false,
                            Oran = 77.4m,
                            SegmentId = 10,
                            StartPrice = 0.00m
                        },
                        new
                        {
                            Id = 306,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 199.99m,
                            IsDeleted = false,
                            Oran = 48.37m,
                            SegmentId = 10,
                            StartPrice = 50.00m
                        },
                        new
                        {
                            Id = 307,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 499.99m,
                            IsDeleted = false,
                            Oran = 39.13m,
                            SegmentId = 10,
                            StartPrice = 200.00m
                        },
                        new
                        {
                            Id = 308,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 999.99m,
                            IsDeleted = false,
                            Oran = 29.02m,
                            SegmentId = 10,
                            StartPrice = 500.00m
                        },
                        new
                        {
                            Id = 309,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 2499.99m,
                            IsDeleted = false,
                            Oran = 24.08m,
                            SegmentId = 10,
                            StartPrice = 1000.00m
                        },
                        new
                        {
                            Id = 310,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 4999.99m,
                            IsDeleted = false,
                            Oran = 21.82m,
                            SegmentId = 10,
                            StartPrice = 2500.00m
                        },
                        new
                        {
                            Id = 311,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 9999.99m,
                            IsDeleted = false,
                            Oran = 20.96m,
                            SegmentId = 10,
                            StartPrice = 5000.00m
                        },
                        new
                        {
                            Id = 312,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 19999.99m,
                            IsDeleted = false,
                            Oran = 19.99m,
                            SegmentId = 10,
                            StartPrice = 10000.00m
                        },
                        new
                        {
                            Id = 313,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 39999.99m,
                            IsDeleted = false,
                            Oran = 17.2m,
                            SegmentId = 10,
                            StartPrice = 20000.00m
                        },
                        new
                        {
                            Id = 314,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 74999.99m,
                            IsDeleted = false,
                            Oran = 15.96m,
                            SegmentId = 10,
                            StartPrice = 40000.00m
                        },
                        new
                        {
                            Id = 315,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 99999.99m,
                            IsDeleted = false,
                            Oran = 15.35m,
                            SegmentId = 10,
                            StartPrice = 75000.00m
                        },
                        new
                        {
                            Id = 316,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 149999.99m,
                            IsDeleted = false,
                            Oran = 15.05m,
                            SegmentId = 10,
                            StartPrice = 100000.00m
                        },
                        new
                        {
                            Id = 317,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 249999.99m,
                            IsDeleted = false,
                            Oran = 11.61m,
                            SegmentId = 10,
                            StartPrice = 150000.00m
                        },
                        new
                        {
                            Id = 318,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 499999.99m,
                            IsDeleted = false,
                            Oran = 9.94m,
                            SegmentId = 10,
                            StartPrice = 250000.00m
                        },
                        new
                        {
                            Id = 319,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 999999.99m,
                            IsDeleted = false,
                            Oran = 8.99m,
                            SegmentId = 10,
                            StartPrice = 500000.00m
                        },
                        new
                        {
                            Id = 320,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 2,
                            EndPrice = 99999999.99m,
                            IsDeleted = false,
                            Oran = 5.96m,
                            SegmentId = 10,
                            StartPrice = 1000000.00m
                        },
                        new
                        {
                            Id = 321,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 49.99m,
                            IsDeleted = false,
                            Oran = 13.5m,
                            SegmentId = 1,
                            StartPrice = 0.00m
                        },
                        new
                        {
                            Id = 322,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 199.99m,
                            IsDeleted = false,
                            Oran = 8.1m,
                            SegmentId = 1,
                            StartPrice = 50.00m
                        },
                        new
                        {
                            Id = 323,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 499.99m,
                            IsDeleted = false,
                            Oran = 6.3m,
                            SegmentId = 1,
                            StartPrice = 200.00m
                        },
                        new
                        {
                            Id = 324,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 999.99m,
                            IsDeleted = false,
                            Oran = 4.5m,
                            SegmentId = 1,
                            StartPrice = 500.00m
                        },
                        new
                        {
                            Id = 325,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 2499.99m,
                            IsDeleted = false,
                            Oran = 3.6m,
                            SegmentId = 1,
                            StartPrice = 1000.00m
                        },
                        new
                        {
                            Id = 326,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 4999.99m,
                            IsDeleted = false,
                            Oran = 3.15m,
                            SegmentId = 1,
                            StartPrice = 2500.00m
                        },
                        new
                        {
                            Id = 327,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 9999.99m,
                            IsDeleted = false,
                            Oran = 2.93m,
                            SegmentId = 1,
                            StartPrice = 5000.00m
                        },
                        new
                        {
                            Id = 328,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 19999.99m,
                            IsDeleted = false,
                            Oran = 2.7m,
                            SegmentId = 1,
                            StartPrice = 10000.00m
                        },
                        new
                        {
                            Id = 329,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 39999.99m,
                            IsDeleted = false,
                            Oran = 2.25m,
                            SegmentId = 1,
                            StartPrice = 20000.00m
                        },
                        new
                        {
                            Id = 330,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 74999.99m,
                            IsDeleted = false,
                            Oran = 2.03m,
                            SegmentId = 1,
                            StartPrice = 40000.00m
                        },
                        new
                        {
                            Id = 331,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 99999.99m,
                            IsDeleted = false,
                            Oran = 1.89m,
                            SegmentId = 1,
                            StartPrice = 75000.00m
                        },
                        new
                        {
                            Id = 332,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 149999.99m,
                            IsDeleted = false,
                            Oran = 1.8m,
                            SegmentId = 1,
                            StartPrice = 100000.00m
                        },
                        new
                        {
                            Id = 333,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 249999.99m,
                            IsDeleted = false,
                            Oran = 1.35m,
                            SegmentId = 1,
                            StartPrice = 150000.00m
                        },
                        new
                        {
                            Id = 334,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 499999.99m,
                            IsDeleted = false,
                            Oran = 1.13m,
                            SegmentId = 1,
                            StartPrice = 250000.00m
                        },
                        new
                        {
                            Id = 335,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 999999.99m,
                            IsDeleted = false,
                            Oran = 0.99m,
                            SegmentId = 1,
                            StartPrice = 500000.00m
                        },
                        new
                        {
                            Id = 336,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 99999999.99m,
                            IsDeleted = false,
                            Oran = 0.9m,
                            SegmentId = 1,
                            StartPrice = 1000000.00m
                        },
                        new
                        {
                            Id = 337,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 49.99m,
                            IsDeleted = false,
                            Oran = 16.2m,
                            SegmentId = 2,
                            StartPrice = 0.00m
                        },
                        new
                        {
                            Id = 338,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 199.99m,
                            IsDeleted = false,
                            Oran = 9.72m,
                            SegmentId = 2,
                            StartPrice = 50.00m
                        },
                        new
                        {
                            Id = 339,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 499.99m,
                            IsDeleted = false,
                            Oran = 7.56m,
                            SegmentId = 2,
                            StartPrice = 200.00m
                        },
                        new
                        {
                            Id = 340,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 999.99m,
                            IsDeleted = false,
                            Oran = 5.4m,
                            SegmentId = 2,
                            StartPrice = 500.00m
                        },
                        new
                        {
                            Id = 341,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 2499.99m,
                            IsDeleted = false,
                            Oran = 4.32m,
                            SegmentId = 2,
                            StartPrice = 1000.00m
                        },
                        new
                        {
                            Id = 342,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 4999.99m,
                            IsDeleted = false,
                            Oran = 3.78m,
                            SegmentId = 2,
                            StartPrice = 2500.00m
                        },
                        new
                        {
                            Id = 343,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 9999.99m,
                            IsDeleted = false,
                            Oran = 3.51m,
                            SegmentId = 2,
                            StartPrice = 5000.00m
                        },
                        new
                        {
                            Id = 344,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 19999.99m,
                            IsDeleted = false,
                            Oran = 3.24m,
                            SegmentId = 2,
                            StartPrice = 10000.00m
                        },
                        new
                        {
                            Id = 345,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 39999.99m,
                            IsDeleted = false,
                            Oran = 2.7m,
                            SegmentId = 2,
                            StartPrice = 20000.00m
                        },
                        new
                        {
                            Id = 346,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 74999.99m,
                            IsDeleted = false,
                            Oran = 2.43m,
                            SegmentId = 2,
                            StartPrice = 40000.00m
                        },
                        new
                        {
                            Id = 347,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 99999.99m,
                            IsDeleted = false,
                            Oran = 2.27m,
                            SegmentId = 2,
                            StartPrice = 75000.00m
                        },
                        new
                        {
                            Id = 348,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 149999.99m,
                            IsDeleted = false,
                            Oran = 2.16m,
                            SegmentId = 2,
                            StartPrice = 100000.00m
                        },
                        new
                        {
                            Id = 349,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 249999.99m,
                            IsDeleted = false,
                            Oran = 1.62m,
                            SegmentId = 2,
                            StartPrice = 150000.00m
                        },
                        new
                        {
                            Id = 350,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 499999.99m,
                            IsDeleted = false,
                            Oran = 1.35m,
                            SegmentId = 2,
                            StartPrice = 250000.00m
                        },
                        new
                        {
                            Id = 351,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 999999.99m,
                            IsDeleted = false,
                            Oran = 1.19m,
                            SegmentId = 2,
                            StartPrice = 500000.00m
                        },
                        new
                        {
                            Id = 352,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 99999999.99m,
                            IsDeleted = false,
                            Oran = 1.08m,
                            SegmentId = 2,
                            StartPrice = 1000000.00m
                        },
                        new
                        {
                            Id = 353,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 49.99m,
                            IsDeleted = false,
                            Oran = 19.44m,
                            SegmentId = 3,
                            StartPrice = 0.00m
                        },
                        new
                        {
                            Id = 354,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 199.99m,
                            IsDeleted = false,
                            Oran = 11.66m,
                            SegmentId = 3,
                            StartPrice = 50.00m
                        },
                        new
                        {
                            Id = 355,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 499.99m,
                            IsDeleted = false,
                            Oran = 9.07m,
                            SegmentId = 3,
                            StartPrice = 200.00m
                        },
                        new
                        {
                            Id = 356,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 999.99m,
                            IsDeleted = false,
                            Oran = 6.48m,
                            SegmentId = 3,
                            StartPrice = 500.00m
                        },
                        new
                        {
                            Id = 357,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 2499.99m,
                            IsDeleted = false,
                            Oran = 5.18m,
                            SegmentId = 3,
                            StartPrice = 1000.00m
                        },
                        new
                        {
                            Id = 358,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 4999.99m,
                            IsDeleted = false,
                            Oran = 4.54m,
                            SegmentId = 3,
                            StartPrice = 2500.00m
                        },
                        new
                        {
                            Id = 359,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 9999.99m,
                            IsDeleted = false,
                            Oran = 4.21m,
                            SegmentId = 3,
                            StartPrice = 5000.00m
                        },
                        new
                        {
                            Id = 360,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 19999.99m,
                            IsDeleted = false,
                            Oran = 3.89m,
                            SegmentId = 3,
                            StartPrice = 10000.00m
                        },
                        new
                        {
                            Id = 361,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 39999.99m,
                            IsDeleted = false,
                            Oran = 3.24m,
                            SegmentId = 3,
                            StartPrice = 20000.00m
                        },
                        new
                        {
                            Id = 362,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 74999.99m,
                            IsDeleted = false,
                            Oran = 2.92m,
                            SegmentId = 3,
                            StartPrice = 40000.00m
                        },
                        new
                        {
                            Id = 363,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 99999.99m,
                            IsDeleted = false,
                            Oran = 2.72m,
                            SegmentId = 3,
                            StartPrice = 75000.00m
                        },
                        new
                        {
                            Id = 364,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 149999.99m,
                            IsDeleted = false,
                            Oran = 2.59m,
                            SegmentId = 3,
                            StartPrice = 100000.00m
                        },
                        new
                        {
                            Id = 365,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 249999.99m,
                            IsDeleted = false,
                            Oran = 1.94m,
                            SegmentId = 3,
                            StartPrice = 150000.00m
                        },
                        new
                        {
                            Id = 366,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 499999.99m,
                            IsDeleted = false,
                            Oran = 1.62m,
                            SegmentId = 3,
                            StartPrice = 250000.00m
                        },
                        new
                        {
                            Id = 367,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 999999.99m,
                            IsDeleted = false,
                            Oran = 1.43m,
                            SegmentId = 3,
                            StartPrice = 500000.00m
                        },
                        new
                        {
                            Id = 368,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 99999999.99m,
                            IsDeleted = false,
                            Oran = 1.3m,
                            SegmentId = 3,
                            StartPrice = 1000000.00m
                        },
                        new
                        {
                            Id = 369,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 49.99m,
                            IsDeleted = false,
                            Oran = 23.33m,
                            SegmentId = 4,
                            StartPrice = 0.00m
                        },
                        new
                        {
                            Id = 370,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 199.99m,
                            IsDeleted = false,
                            Oran = 14m,
                            SegmentId = 4,
                            StartPrice = 50.00m
                        },
                        new
                        {
                            Id = 371,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 499.99m,
                            IsDeleted = false,
                            Oran = 10.89m,
                            SegmentId = 4,
                            StartPrice = 200.00m
                        },
                        new
                        {
                            Id = 372,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 999.99m,
                            IsDeleted = false,
                            Oran = 7.78m,
                            SegmentId = 4,
                            StartPrice = 500.00m
                        },
                        new
                        {
                            Id = 373,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 2499.99m,
                            IsDeleted = false,
                            Oran = 6.22m,
                            SegmentId = 4,
                            StartPrice = 1000.00m
                        },
                        new
                        {
                            Id = 374,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 4999.99m,
                            IsDeleted = false,
                            Oran = 5.44m,
                            SegmentId = 4,
                            StartPrice = 2500.00m
                        },
                        new
                        {
                            Id = 375,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 9999.99m,
                            IsDeleted = false,
                            Oran = 5.05m,
                            SegmentId = 4,
                            StartPrice = 5000.00m
                        },
                        new
                        {
                            Id = 376,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 19999.99m,
                            IsDeleted = false,
                            Oran = 4.67m,
                            SegmentId = 4,
                            StartPrice = 10000.00m
                        },
                        new
                        {
                            Id = 377,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 39999.99m,
                            IsDeleted = false,
                            Oran = 3.89m,
                            SegmentId = 4,
                            StartPrice = 20000.00m
                        },
                        new
                        {
                            Id = 378,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 74999.99m,
                            IsDeleted = false,
                            Oran = 3.5m,
                            SegmentId = 4,
                            StartPrice = 40000.00m
                        },
                        new
                        {
                            Id = 379,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 99999.99m,
                            IsDeleted = false,
                            Oran = 3.27m,
                            SegmentId = 4,
                            StartPrice = 75000.00m
                        },
                        new
                        {
                            Id = 380,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 149999.99m,
                            IsDeleted = false,
                            Oran = 3.11m,
                            SegmentId = 4,
                            StartPrice = 100000.00m
                        },
                        new
                        {
                            Id = 381,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 249999.99m,
                            IsDeleted = false,
                            Oran = 2.33m,
                            SegmentId = 4,
                            StartPrice = 150000.00m
                        },
                        new
                        {
                            Id = 382,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 499999.99m,
                            IsDeleted = false,
                            Oran = 1.9m,
                            SegmentId = 4,
                            StartPrice = 250000.00m
                        },
                        new
                        {
                            Id = 383,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 999999.99m,
                            IsDeleted = false,
                            Oran = 1.71m,
                            SegmentId = 4,
                            StartPrice = 500000.00m
                        },
                        new
                        {
                            Id = 384,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 99999999.99m,
                            IsDeleted = false,
                            Oran = 1.56m,
                            SegmentId = 4,
                            StartPrice = 1000000.00m
                        },
                        new
                        {
                            Id = 385,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 49.99m,
                            IsDeleted = false,
                            Oran = 27.99m,
                            SegmentId = 5,
                            StartPrice = 0.00m
                        },
                        new
                        {
                            Id = 386,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 199.99m,
                            IsDeleted = false,
                            Oran = 16.8m,
                            SegmentId = 5,
                            StartPrice = 50.00m
                        },
                        new
                        {
                            Id = 387,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 499.99m,
                            IsDeleted = false,
                            Oran = 13.06m,
                            SegmentId = 5,
                            StartPrice = 200.00m
                        },
                        new
                        {
                            Id = 388,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 999.99m,
                            IsDeleted = false,
                            Oran = 9.33m,
                            SegmentId = 5,
                            StartPrice = 500.00m
                        },
                        new
                        {
                            Id = 389,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 2499.99m,
                            IsDeleted = false,
                            Oran = 7.46m,
                            SegmentId = 5,
                            StartPrice = 1000.00m
                        },
                        new
                        {
                            Id = 390,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 4999.99m,
                            IsDeleted = false,
                            Oran = 6.53m,
                            SegmentId = 5,
                            StartPrice = 2500.00m
                        },
                        new
                        {
                            Id = 391,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 9999.99m,
                            IsDeleted = false,
                            Oran = 6.07m,
                            SegmentId = 5,
                            StartPrice = 5000.00m
                        },
                        new
                        {
                            Id = 392,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 19999.99m,
                            IsDeleted = false,
                            Oran = 5.6m,
                            SegmentId = 5,
                            StartPrice = 10000.00m
                        },
                        new
                        {
                            Id = 393,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 39999.99m,
                            IsDeleted = false,
                            Oran = 4.67m,
                            SegmentId = 5,
                            StartPrice = 20000.00m
                        },
                        new
                        {
                            Id = 394,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 74999.99m,
                            IsDeleted = false,
                            Oran = 4.2m,
                            SegmentId = 5,
                            StartPrice = 40000.00m
                        },
                        new
                        {
                            Id = 395,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 99999.99m,
                            IsDeleted = false,
                            Oran = 3.92m,
                            SegmentId = 5,
                            StartPrice = 75000.00m
                        },
                        new
                        {
                            Id = 396,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 149999.99m,
                            IsDeleted = false,
                            Oran = 3.73m,
                            SegmentId = 5,
                            StartPrice = 100000.00m
                        },
                        new
                        {
                            Id = 397,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 249999.99m,
                            IsDeleted = false,
                            Oran = 2.8m,
                            SegmentId = 5,
                            StartPrice = 150000.00m
                        },
                        new
                        {
                            Id = 398,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 499999.99m,
                            IsDeleted = false,
                            Oran = 2.33m,
                            SegmentId = 5,
                            StartPrice = 250000.00m
                        },
                        new
                        {
                            Id = 399,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 999999.99m,
                            IsDeleted = false,
                            Oran = 2.05m,
                            SegmentId = 5,
                            StartPrice = 500000.00m
                        },
                        new
                        {
                            Id = 400,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 99999999.99m,
                            IsDeleted = false,
                            Oran = 1.87m,
                            SegmentId = 5,
                            StartPrice = 1000000.00m
                        },
                        new
                        {
                            Id = 401,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 49.99m,
                            IsDeleted = false,
                            Oran = 33.59m,
                            SegmentId = 6,
                            StartPrice = 0.00m
                        },
                        new
                        {
                            Id = 402,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 199.99m,
                            IsDeleted = false,
                            Oran = 20.16m,
                            SegmentId = 6,
                            StartPrice = 50.00m
                        },
                        new
                        {
                            Id = 403,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 499.99m,
                            IsDeleted = false,
                            Oran = 15.68m,
                            SegmentId = 6,
                            StartPrice = 200.00m
                        },
                        new
                        {
                            Id = 404,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 999.99m,
                            IsDeleted = false,
                            Oran = 11.2m,
                            SegmentId = 6,
                            StartPrice = 500.00m
                        },
                        new
                        {
                            Id = 405,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 2499.99m,
                            IsDeleted = false,
                            Oran = 8.96m,
                            SegmentId = 6,
                            StartPrice = 1000.00m
                        },
                        new
                        {
                            Id = 406,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 4999.99m,
                            IsDeleted = false,
                            Oran = 7.84m,
                            SegmentId = 6,
                            StartPrice = 2500.00m
                        },
                        new
                        {
                            Id = 407,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 9999.99m,
                            IsDeleted = false,
                            Oran = 7.28m,
                            SegmentId = 6,
                            StartPrice = 5000.00m
                        },
                        new
                        {
                            Id = 408,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 19999.99m,
                            IsDeleted = false,
                            Oran = 6.72m,
                            SegmentId = 6,
                            StartPrice = 10000.00m
                        },
                        new
                        {
                            Id = 409,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 39999.99m,
                            IsDeleted = false,
                            Oran = 5.6m,
                            SegmentId = 6,
                            StartPrice = 20000.00m
                        },
                        new
                        {
                            Id = 410,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 74999.99m,
                            IsDeleted = false,
                            Oran = 5.04m,
                            SegmentId = 6,
                            StartPrice = 40000.00m
                        },
                        new
                        {
                            Id = 411,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 99999.99m,
                            IsDeleted = false,
                            Oran = 4.7m,
                            SegmentId = 6,
                            StartPrice = 75000.00m
                        },
                        new
                        {
                            Id = 412,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 149999.99m,
                            IsDeleted = false,
                            Oran = 4.48m,
                            SegmentId = 6,
                            StartPrice = 100000.00m
                        },
                        new
                        {
                            Id = 413,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 249999.99m,
                            IsDeleted = false,
                            Oran = 3.36m,
                            SegmentId = 6,
                            StartPrice = 150000.00m
                        },
                        new
                        {
                            Id = 414,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 499999.99m,
                            IsDeleted = false,
                            Oran = 2.8m,
                            SegmentId = 6,
                            StartPrice = 250000.00m
                        },
                        new
                        {
                            Id = 415,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 999999.99m,
                            IsDeleted = false,
                            Oran = 2.46m,
                            SegmentId = 6,
                            StartPrice = 500000.00m
                        },
                        new
                        {
                            Id = 416,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 99999999.99m,
                            IsDeleted = false,
                            Oran = 2.24m,
                            SegmentId = 6,
                            StartPrice = 1000000.00m
                        },
                        new
                        {
                            Id = 417,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 49.99m,
                            IsDeleted = false,
                            Oran = 40.31m,
                            SegmentId = 7,
                            StartPrice = 0.00m
                        },
                        new
                        {
                            Id = 418,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 199.99m,
                            IsDeleted = false,
                            Oran = 24.19m,
                            SegmentId = 7,
                            StartPrice = 50.00m
                        },
                        new
                        {
                            Id = 419,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 499.99m,
                            IsDeleted = false,
                            Oran = 18.81m,
                            SegmentId = 7,
                            StartPrice = 200.00m
                        },
                        new
                        {
                            Id = 420,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 999.99m,
                            IsDeleted = false,
                            Oran = 13.44m,
                            SegmentId = 7,
                            StartPrice = 500.00m
                        },
                        new
                        {
                            Id = 421,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 2499.99m,
                            IsDeleted = false,
                            Oran = 10.75m,
                            SegmentId = 7,
                            StartPrice = 1000.00m
                        },
                        new
                        {
                            Id = 422,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 4999.99m,
                            IsDeleted = false,
                            Oran = 9.41m,
                            SegmentId = 7,
                            StartPrice = 2500.00m
                        },
                        new
                        {
                            Id = 423,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 9999.99m,
                            IsDeleted = false,
                            Oran = 8.73m,
                            SegmentId = 7,
                            StartPrice = 5000.00m
                        },
                        new
                        {
                            Id = 424,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 19999.99m,
                            IsDeleted = false,
                            Oran = 8.06m,
                            SegmentId = 7,
                            StartPrice = 10000.00m
                        },
                        new
                        {
                            Id = 425,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 39999.99m,
                            IsDeleted = false,
                            Oran = 6.72m,
                            SegmentId = 7,
                            StartPrice = 20000.00m
                        },
                        new
                        {
                            Id = 426,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 74999.99m,
                            IsDeleted = false,
                            Oran = 6.05m,
                            SegmentId = 7,
                            StartPrice = 40000.00m
                        },
                        new
                        {
                            Id = 427,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 99999.99m,
                            IsDeleted = false,
                            Oran = 5.64m,
                            SegmentId = 7,
                            StartPrice = 75000.00m
                        },
                        new
                        {
                            Id = 428,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 149999.99m,
                            IsDeleted = false,
                            Oran = 5.37m,
                            SegmentId = 7,
                            StartPrice = 100000.00m
                        },
                        new
                        {
                            Id = 429,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 249999.99m,
                            IsDeleted = false,
                            Oran = 4.03m,
                            SegmentId = 7,
                            StartPrice = 150000.00m
                        },
                        new
                        {
                            Id = 430,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 499999.99m,
                            IsDeleted = false,
                            Oran = 3.36m,
                            SegmentId = 7,
                            StartPrice = 250000.00m
                        },
                        new
                        {
                            Id = 431,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 999999.99m,
                            IsDeleted = false,
                            Oran = 2.96m,
                            SegmentId = 7,
                            StartPrice = 500000.00m
                        },
                        new
                        {
                            Id = 432,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 99999999.99m,
                            IsDeleted = false,
                            Oran = 2.69m,
                            SegmentId = 7,
                            StartPrice = 1000000.00m
                        },
                        new
                        {
                            Id = 433,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 49.99m,
                            IsDeleted = false,
                            Oran = 48.37m,
                            SegmentId = 8,
                            StartPrice = 0.00m
                        },
                        new
                        {
                            Id = 434,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 199.99m,
                            IsDeleted = false,
                            Oran = 29.02m,
                            SegmentId = 8,
                            StartPrice = 50.00m
                        },
                        new
                        {
                            Id = 435,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 499.99m,
                            IsDeleted = false,
                            Oran = 22.57m,
                            SegmentId = 8,
                            StartPrice = 200.00m
                        },
                        new
                        {
                            Id = 436,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 999.99m,
                            IsDeleted = false,
                            Oran = 16.12m,
                            SegmentId = 8,
                            StartPrice = 500.00m
                        },
                        new
                        {
                            Id = 437,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 2499.99m,
                            IsDeleted = false,
                            Oran = 12.9m,
                            SegmentId = 8,
                            StartPrice = 1000.00m
                        },
                        new
                        {
                            Id = 438,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 4999.99m,
                            IsDeleted = false,
                            Oran = 11.29m,
                            SegmentId = 8,
                            StartPrice = 2500.00m
                        },
                        new
                        {
                            Id = 439,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 9999.99m,
                            IsDeleted = false,
                            Oran = 10.48m,
                            SegmentId = 8,
                            StartPrice = 5000.00m
                        },
                        new
                        {
                            Id = 440,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 19999.99m,
                            IsDeleted = false,
                            Oran = 9.67m,
                            SegmentId = 8,
                            StartPrice = 10000.00m
                        },
                        new
                        {
                            Id = 441,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 39999.99m,
                            IsDeleted = false,
                            Oran = 8.06m,
                            SegmentId = 8,
                            StartPrice = 20000.00m
                        },
                        new
                        {
                            Id = 442,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 74999.99m,
                            IsDeleted = false,
                            Oran = 7.26m,
                            SegmentId = 8,
                            StartPrice = 40000.00m
                        },
                        new
                        {
                            Id = 443,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 99999.99m,
                            IsDeleted = false,
                            Oran = 6.77m,
                            SegmentId = 8,
                            StartPrice = 75000.00m
                        },
                        new
                        {
                            Id = 444,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 149999.99m,
                            IsDeleted = false,
                            Oran = 6.45m,
                            SegmentId = 8,
                            StartPrice = 100000.00m
                        },
                        new
                        {
                            Id = 445,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 249999.99m,
                            IsDeleted = false,
                            Oran = 4.84m,
                            SegmentId = 8,
                            StartPrice = 150000.00m
                        },
                        new
                        {
                            Id = 446,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 499999.99m,
                            IsDeleted = false,
                            Oran = 4.03m,
                            SegmentId = 8,
                            StartPrice = 250000.00m
                        },
                        new
                        {
                            Id = 447,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 999999.99m,
                            IsDeleted = false,
                            Oran = 3.55m,
                            SegmentId = 8,
                            StartPrice = 500000.00m
                        },
                        new
                        {
                            Id = 448,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 99999999.99m,
                            IsDeleted = false,
                            Oran = 3.22m,
                            SegmentId = 8,
                            StartPrice = 1000000.00m
                        },
                        new
                        {
                            Id = 449,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 49.99m,
                            IsDeleted = false,
                            Oran = 58.05m,
                            SegmentId = 9,
                            StartPrice = 0.00m
                        },
                        new
                        {
                            Id = 450,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 199.99m,
                            IsDeleted = false,
                            Oran = 34.83m,
                            SegmentId = 9,
                            StartPrice = 50.00m
                        },
                        new
                        {
                            Id = 451,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 499.99m,
                            IsDeleted = false,
                            Oran = 27.09m,
                            SegmentId = 9,
                            StartPrice = 200.00m
                        },
                        new
                        {
                            Id = 452,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 999.99m,
                            IsDeleted = false,
                            Oran = 19.35m,
                            SegmentId = 9,
                            StartPrice = 500.00m
                        },
                        new
                        {
                            Id = 453,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 2499.99m,
                            IsDeleted = false,
                            Oran = 15.48m,
                            SegmentId = 9,
                            StartPrice = 1000.00m
                        },
                        new
                        {
                            Id = 454,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 4999.99m,
                            IsDeleted = false,
                            Oran = 13.54m,
                            SegmentId = 9,
                            StartPrice = 2500.00m
                        },
                        new
                        {
                            Id = 455,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 9999.99m,
                            IsDeleted = false,
                            Oran = 12.58m,
                            SegmentId = 9,
                            StartPrice = 5000.00m
                        },
                        new
                        {
                            Id = 456,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 19999.99m,
                            IsDeleted = false,
                            Oran = 11.61m,
                            SegmentId = 9,
                            StartPrice = 10000.00m
                        },
                        new
                        {
                            Id = 457,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 39999.99m,
                            IsDeleted = false,
                            Oran = 9.67m,
                            SegmentId = 9,
                            StartPrice = 20000.00m
                        },
                        new
                        {
                            Id = 458,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 74999.99m,
                            IsDeleted = false,
                            Oran = 8.71m,
                            SegmentId = 9,
                            StartPrice = 40000.00m
                        },
                        new
                        {
                            Id = 459,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 99999.99m,
                            IsDeleted = false,
                            Oran = 8.13m,
                            SegmentId = 9,
                            StartPrice = 75000.00m
                        },
                        new
                        {
                            Id = 460,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 149999.99m,
                            IsDeleted = false,
                            Oran = 7.74m,
                            SegmentId = 9,
                            StartPrice = 100000.00m
                        },
                        new
                        {
                            Id = 461,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 249999.99m,
                            IsDeleted = false,
                            Oran = 5.8m,
                            SegmentId = 9,
                            StartPrice = 150000.00m
                        },
                        new
                        {
                            Id = 462,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 499999.99m,
                            IsDeleted = false,
                            Oran = 4.84m,
                            SegmentId = 9,
                            StartPrice = 250000.00m
                        },
                        new
                        {
                            Id = 463,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 999999.99m,
                            IsDeleted = false,
                            Oran = 4.26m,
                            SegmentId = 9,
                            StartPrice = 500000.00m
                        },
                        new
                        {
                            Id = 464,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 99999999.99m,
                            IsDeleted = false,
                            Oran = 3.87m,
                            SegmentId = 9,
                            StartPrice = 1000000.00m
                        },
                        new
                        {
                            Id = 465,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 49.99m,
                            IsDeleted = false,
                            Oran = 69.66m,
                            SegmentId = 10,
                            StartPrice = 0.00m
                        },
                        new
                        {
                            Id = 466,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 199.99m,
                            IsDeleted = false,
                            Oran = 43.54m,
                            SegmentId = 10,
                            StartPrice = 50.00m
                        },
                        new
                        {
                            Id = 467,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 499.99m,
                            IsDeleted = false,
                            Oran = 35.22m,
                            SegmentId = 10,
                            StartPrice = 200.00m
                        },
                        new
                        {
                            Id = 468,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 999.99m,
                            IsDeleted = false,
                            Oran = 26.12m,
                            SegmentId = 10,
                            StartPrice = 500.00m
                        },
                        new
                        {
                            Id = 469,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 2499.99m,
                            IsDeleted = false,
                            Oran = 21.67m,
                            SegmentId = 10,
                            StartPrice = 1000.00m
                        },
                        new
                        {
                            Id = 470,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 4999.99m,
                            IsDeleted = false,
                            Oran = 19.64m,
                            SegmentId = 10,
                            StartPrice = 2500.00m
                        },
                        new
                        {
                            Id = 471,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 9999.99m,
                            IsDeleted = false,
                            Oran = 18.87m,
                            SegmentId = 10,
                            StartPrice = 5000.00m
                        },
                        new
                        {
                            Id = 472,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 19999.99m,
                            IsDeleted = false,
                            Oran = 17.99m,
                            SegmentId = 10,
                            StartPrice = 10000.00m
                        },
                        new
                        {
                            Id = 473,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 39999.99m,
                            IsDeleted = false,
                            Oran = 15.48m,
                            SegmentId = 10,
                            StartPrice = 20000.00m
                        },
                        new
                        {
                            Id = 474,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 74999.99m,
                            IsDeleted = false,
                            Oran = 14.37m,
                            SegmentId = 10,
                            StartPrice = 40000.00m
                        },
                        new
                        {
                            Id = 475,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 99999.99m,
                            IsDeleted = false,
                            Oran = 13.82m,
                            SegmentId = 10,
                            StartPrice = 75000.00m
                        },
                        new
                        {
                            Id = 476,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 149999.99m,
                            IsDeleted = false,
                            Oran = 13.54m,
                            SegmentId = 10,
                            StartPrice = 100000.00m
                        },
                        new
                        {
                            Id = 477,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 249999.99m,
                            IsDeleted = false,
                            Oran = 10.45m,
                            SegmentId = 10,
                            StartPrice = 150000.00m
                        },
                        new
                        {
                            Id = 478,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 499999.99m,
                            IsDeleted = false,
                            Oran = 8.05m,
                            SegmentId = 10,
                            StartPrice = 250000.00m
                        },
                        new
                        {
                            Id = 479,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 999999.99m,
                            IsDeleted = false,
                            Oran = 8.09m,
                            SegmentId = 10,
                            StartPrice = 500000.00m
                        },
                        new
                        {
                            Id = 480,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyID = 3,
                            EndPrice = 99999999.99m,
                            IsDeleted = false,
                            Oran = 7.55m,
                            SegmentId = 10,
                            StartPrice = 1000000.00m
                        });
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.SellsAndBuysAsset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("CurrentStepId")
                        .HasColumnType("int")
                        .HasColumnName("CurrentStepID");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSell")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SabcategoryId")
                        .HasColumnType("int")
                        .HasColumnName("SABCategoryID");

                    b.HasKey("Id");

                    b.HasIndex("AddedBy");

                    b.HasIndex("CurrentStepId");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("SabcategoryId");

                    b.ToTable("SellsAndBuysAssets");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.SellsAndBuysCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddedBy")
                        .HasColumnType("int");

                    b.Property<string>("CategoryDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id");

                    b.HasIndex("AddedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("SellsAndBuysCategories");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.SellsAndBuysGuideStep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSell")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("SabcategoryId")
                        .HasColumnType("int")
                        .HasColumnName("SABCategoryID");

                    b.Property<int?>("StepCount")
                        .HasColumnType("int");

                    b.Property<string>("StepDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StepName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AddedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("SabcategoryId");

                    b.ToTable("SellsAndBuysGuideSteps");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.ServicePlace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AddedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("ServicePlaces");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.ServiceReason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AddedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("ServiceReasons");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.ServiceRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddedBy")
                        .HasColumnType("int");

                    b.Property<string>("ArizaTanimi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("MudahaleEdilenCihaz")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MudahaleEdilenModel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ServiceBeginDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ServiceEndDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ServicePersonalUser")
                        .HasColumnType("int");

                    b.Property<int>("ServicePlaceId")
                        .HasColumnType("int")
                        .HasColumnName("ServicePlaceID");

                    b.Property<int>("ServiceReasonId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceReasonID");

                    b.Property<int>("ServiceTypeId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceTypeID");

                    b.Property<string>("YapilacakIslem")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddedBy");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("ServicePersonalUser");

                    b.HasIndex("ServicePlaceId");

                    b.HasIndex("ServiceReasonId");

                    b.HasIndex("ServiceTypeId");

                    b.ToTable("ServiceRecords");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.ServiceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AddedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("ServiceTypes");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.ShippingDeal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddedBy")
                        .HasColumnType("int");

                    b.Property<int>("AddedByNavigationId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedByNavigationId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AddedByNavigationId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ModifiedByNavigationId");

                    b.ToTable("ShippingDeals");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("DealerCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastContactDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("OncelikSirasi")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SupplierName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("URL");

                    b.HasKey("Id");

                    b.HasIndex("AddedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.SupplierDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddedBy")
                        .HasColumnType("int");

                    b.Property<int>("AddedByNavigationId")
                        .HasColumnType("int");

                    b.Property<decimal?>("ArizaKargoUcreti")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int")
                        .HasColumnName("CurrencyID");

                    b.Property<string>("Dahili")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("DepoAdres")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("GonderiTuru")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Gsm")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("GSM");

                    b.Property<decimal>("IadeKargoUcreti")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("IsTel")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("KargoBedeli")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("KargoBedeliSatisSiniri")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedByNavigationId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MusteriTemsilcisi")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OdemeSekli")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Sevkiyat")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SiparisSiniri")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int")
                        .HasColumnName("SupplierID");

                    b.Property<DateTime?>("SıparisSaati")
                        .HasColumnType("datetime");

                    b.Property<string>("Vade")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("YetkiliKisi")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AddedByNavigationId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("ModifiedByNavigationId");

                    b.HasIndex("SupplierId");

                    b.ToTable("SupplierDetails");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.SupplierPaymentState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AddedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("SupplierPaymentStates");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.SuppliersPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<decimal>("CurrencyAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int")
                        .HasColumnName("CurrencyID");

                    b.Property<string>("Descripiton")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<decimal>("OdemeTutari")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PaymentOfficerUserId")
                        .HasColumnType("int")
                        .HasColumnName("PaymentOfficerUserID");

                    b.Property<int>("StateId")
                        .HasColumnType("int")
                        .HasColumnName("StateID");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int")
                        .HasColumnName("SupplierID");

                    b.Property<int?>("TaksitSayisi")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("StateId");

                    b.ToTable("SuppliersPayments");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.UserCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AddedBy")
                        .HasColumnType("int");

                    b.Property<string>("CompanyDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("FaliyetKodu")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Fatura")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("KepAdresi")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("MersisNo")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Tel")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TicaretSicilNo")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("AddedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("UserCompanies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyName = "AdminCompany",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.VehicleInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddedBy")
                        .HasColumnType("int");

                    b.Property<int?>("BakimKmperiod")
                        .HasColumnType("int")
                        .HasColumnName("BakimKMPeriod");

                    b.Property<int?>("BazKm")
                        .HasColumnType("int")
                        .HasColumnName("BazKM");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("GelecekMuayeneTarihi")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("K2belgesiBitisTarihi")
                        .HasColumnType("datetime")
                        .HasColumnName("K2BelgesiBitisTarihi");

                    b.Property<DateTime?>("KaskoPoliceBitisTarihi")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("KiraBitisTarihi")
                        .HasColumnType("datetime");

                    b.Property<int?>("KiraToplamKmtaahhut")
                        .HasColumnType("int")
                        .HasColumnName("KiraToplamKMTaahhut");

                    b.Property<DateTime?>("KisLastigiDegisimTarihi")
                        .HasColumnType("datetime");

                    b.Property<short>("ModelYear")
                        .HasColumnType("smallint");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Plaka")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("SonBakimKm")
                        .HasColumnType("int")
                        .HasColumnName("SonBakimKM");

                    b.Property<DateTime?>("SonBakimTarihi")
                        .HasColumnType("datetime");

                    b.Property<int?>("SonOkunanKm")
                        .HasColumnType("int")
                        .HasColumnName("SonOkunanKM");

                    b.Property<DateTime?>("SonOkunanKmtarihi")
                        .HasColumnType("datetime")
                        .HasColumnName("SonOkunanKMTarihi");

                    b.Property<DateTime?>("SonrakiBakimTarihi")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("TakipCihaziYenilemeTarihi")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("TescilTarihi")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("TrafikSigPoliceBitisTarihi")
                        .HasColumnType("datetime");

                    b.Property<int>("UserCompanyId")
                        .HasColumnType("int")
                        .HasColumnName("UserCompanyID");

                    b.Property<DateTime?>("YazLastigiDegisimTarihi")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("AddedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("UserCompanyId");

                    b.ToTable("VehicleInformations");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.WarrantyTracking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddedBy")
                        .HasColumnType("int");

                    b.Property<int>("BrandId")
                        .HasColumnType("int")
                        .HasColumnName("BrandID");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("ProductCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("ProductCategoryID");

                    b.Property<string>("Tel")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AddedBy");

                    b.HasIndex("BrandId");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("WarrantyTrackings");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.WorkStandart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ApplicationCalendar")
                        .HasColumnType("datetime");

                    b.Property<string>("AvalibleHours")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("DepartmentID");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Period")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("WorkDefinition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkTime")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("AddedBy");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("WorkStandarts");
                });

            modelBuilder.Entity("MarketPlacesOfSupplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .HasColumnType("int")
                        .HasColumnName("SupplierID");

                    b.Property<int>("MarketPlaceId")
                        .HasColumnType("int")
                        .HasColumnName("MarketPlaceID");

                    b.HasKey("SupplierId", "MarketPlaceId");

                    b.HasIndex("MarketPlaceId");

                    b.ToTable("MarketPlacesOfSuppliers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserRole<int>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.EntityFrameworkCore.AutoHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Changed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("Kind")
                        .HasColumnType("int");

                    b.Property<string>("RowId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("AutoHistory");
                });

            modelBuilder.Entity("ProductGroupsOfSupplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .HasColumnType("int")
                        .HasColumnName("SupplierID");

                    b.Property<int>("ProductGroupId")
                        .HasColumnType("int")
                        .HasColumnName("ProductGroupID");

                    b.HasKey("SupplierId", "ProductGroupId")
                        .HasName("PK_ProductCategoriesSuppliers");

                    b.HasIndex("ProductGroupId");

                    b.ToTable("ProductGroupsOfSuppliers", (string)null);
                });

            modelBuilder.Entity("ProductsOfSupplier", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int")
                        .HasColumnName("SupplierID");

                    b.HasKey("ProductId", "SupplierId");

                    b.HasIndex("SupplierId");

                    b.ToTable("ProductsOfSuppliers", (string)null);
                });

            modelBuilder.Entity("SuppliersBrand", b =>
                {
                    b.Property<int>("BrandId")
                        .HasColumnType("int")
                        .HasColumnName("BrandID");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int")
                        .HasColumnName("SupplierID");

                    b.HasKey("BrandId", "SupplierId");

                    b.HasIndex("SupplierId");

                    b.ToTable("SuppliersBrands", (string)null);
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.AppRolesOfUsers", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserRole<int>");

                    b.Property<int>("AddedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("StartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasIndex("AddedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasDiscriminator().HasValue("AppRolesOfUsers");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1,
                            AddedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndDate = new DateTime(2032, 5, 16, 18, 19, 11, 113, DateTimeKind.Local).AddTicks(8096),
                            Id = 0,
                            IsDeleted = false,
                            StartDate = new DateTime(2022, 5, 16, 18, 19, 11, 113, DateTimeKind.Local).AddTicks(8095)
                        });
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.Announcement", b =>
                {
                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "AddedByNavigation")
                        .WithMany("AnnouncementsAddedByNavigations")
                        .HasForeignKey("AddedBy")
                        .IsRequired()
                        .HasConstraintName("FK_Announcements_Users");

                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "ModifiedByNavigation")
                        .WithMany("AnnouncementsModifiedByNavigations")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("FK_Announcements_Users1");

                    b.Navigation("AddedByNavigation");

                    b.Navigation("ModifiedByNavigation");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.AppIdentityRole", b =>
                {
                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "AddedByNavigation")
                        .WithMany("AuthorizationsRoleAddedByNavigations")
                        .HasForeignKey("AddedBy")
                        .IsRequired()
                        .HasConstraintName("FK_Authorizations_Users");

                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "ModifiedByNavigation")
                        .WithMany("AuthorizationsRoleModifiedByNavigations")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("FK_Authorizations_Users1");

                    b.HasOne("GegiCRM.Entities.Concrete.AppIdentityRoleGroup", "RoleGroup")
                        .WithMany("Roles")
                        .HasForeignKey("RoleGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AddedByNavigation");

                    b.Navigation("ModifiedByNavigation");

                    b.Navigation("RoleGroup");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.AppIdentityRoleGroup", b =>
                {
                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "AddedByNavigation")
                        .WithMany("AppAuthorizationRoleGroupAddedByNavigations")
                        .HasForeignKey("AddedBy")
                        .IsRequired()
                        .HasConstraintName("FK_AuthorizationRoleGroups_AddedBy");

                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "ModifiedByNavigation")
                        .WithMany("AppAuthorizationRoleGroupModifiedByNavigations")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("FK_AuthorizationRoleGroup_ModifiedBy");

                    b.Navigation("AddedByNavigation");

                    b.Navigation("ModifiedByNavigation");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.AppUser", b =>
                {
                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "AddedByNavigation")
                        .WithMany("InverseAddedByNavigation")
                        .HasForeignKey("AddedBy")
                        .IsRequired()
                        .HasConstraintName("FK_Users_Users");

                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "ModifiedByNavigation")
                        .WithMany("InverseModifiedByNavigation")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("FK_Users_Users1");

                    b.HasOne("GegiCRM.Entities.Concrete.UserCompany", "UserCompany")
                        .WithMany("Users")
                        .HasForeignKey("UserCompanyId")
                        .IsRequired()
                        .HasConstraintName("FK_Users_UserCompanies");

                    b.Navigation("AddedByNavigation");

                    b.Navigation("ModifiedByNavigation");

                    b.Navigation("UserCompany");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.Bank", b =>
                {
                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "AddedByNavigation")
                        .WithMany("BankAddedByNavigations")
                        .HasForeignKey("AddedBy")
                        .IsRequired()
                        .HasConstraintName("FK_Banks_Users");

                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "ModifiedByNavigation")
                        .WithMany("BankModifiedByNavigations")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("FK_Banks_Users1");

                    b.Navigation("AddedByNavigation");

                    b.Navigation("ModifiedByNavigation");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.BankInformation", b =>
                {
                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "AddedByNavigation")
                        .WithMany("BankInformationAddedByNavigations")
                        .HasForeignKey("AddedBy")
                        .IsRequired()
                        .HasConstraintName("FK_BankInformations_Users");

                    b.HasOne("GegiCRM.Entities.Concrete.Bank", "Bank")
                        .WithMany("BankInformations")
                        .HasForeignKey("BankId")
                        .IsRequired()
                        .HasConstraintName("FK_BankInformations_Banks");

                    b.HasOne("GegiCRM.Entities.Concrete.UserCompany", "Company")
                        .WithMany("BankInformations")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK_BankInformations_UserCompanies");

                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "ModifiedByNavigation")
                        .WithMany("BankInformationModifiedByNavigations")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("FK_BankInformations_Users1");

                    b.Navigation("AddedByNavigation");

                    b.Navigation("Bank");

                    b.Navigation("Company");

                    b.Navigation("ModifiedByNavigation");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.Birim", b =>
                {
                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "AddedByNavigation")
                        .WithMany("BirimAddedByNavigations")
                        .HasForeignKey("AddedBy")
                        .IsRequired()
                        .HasConstraintName("FK_Birims_Users");

                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "ModifiedByNavigation")
                        .WithMany("BirimModifiedByNavigations")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("FK_Birims_Users1");

                    b.Navigation("AddedByNavigation");

                    b.Navigation("ModifiedByNavigation");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.Brand", b =>
                {
                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "AddedByNavigation")
                        .WithMany("BrandAddedByNavigations")
                        .HasForeignKey("AddedBy")
                        .IsRequired()
                        .HasConstraintName("FK_Brands_Users");

                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "ModifiedByNavigation")
                        .WithMany("BrandModifiedByNavigations")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("FK_Brands_Users1");

                    b.Navigation("AddedByNavigation");

                    b.Navigation("ModifiedByNavigation");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.CollectionReceipt", b =>
                {
                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "AddedByNavigation")
                        .WithMany("CollectionReceiptAddedByNavigations")
                        .HasForeignKey("AddedBy")
                        .IsRequired()
                        .HasConstraintName("FK_CollectionReceipts_Users");

                    b.HasOne("GegiCRM.Entities.Concrete.Currency", "Currency")
                        .WithMany("CollectionReceipts")
                        .HasForeignKey("CurrencyId")
                        .IsRequired()
                        .HasConstraintName("FK_CollectionReceipts_Currencies");

                    b.HasOne("GegiCRM.Entities.Concrete.Customer", "Customer")
                        .WithMany("CollectionReceipts")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_CollectionReceipts_Customers");

                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "ModifiedByNavigation")
                        .WithMany("CollectionReceiptModifiedByNavigations")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("FK_CollectionReceipts_Users1");

                    b.HasOne("GegiCRM.Entities.Concrete.PaymentType", "PaymentType")
                        .WithMany("CollectionReceipts")
                        .HasForeignKey("PaymentTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_CollectionReceipts_PaymentTypes");

                    b.HasOne("GegiCRM.Entities.Concrete.Supplier", "Supplier")
                        .WithMany("CollectionReceipts")
                        .HasForeignKey("SupplierId")
                        .IsRequired()
                        .HasConstraintName("FK_CollectionReceipts_Suppliers");

                    b.Navigation("AddedByNavigation");

                    b.Navigation("Currency");

                    b.Navigation("Customer");

                    b.Navigation("ModifiedByNavigation");

                    b.Navigation("PaymentType");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.Currency", b =>
                {
                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "AddedByNavigation")
                        .WithMany("CurrencyAddedByNavigations")
                        .HasForeignKey("AddedBy")
                        .IsRequired()
                        .HasConstraintName("FK_CollectionReceipts_AddedBy");

                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "ModifiedByNavigation")
                        .WithMany("CurrencyModifiedByNavigations")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("FK_CollectionReceipts_ModifiedBy");

                    b.Navigation("AddedByNavigation");

                    b.Navigation("ModifiedByNavigation");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.Customer", b =>
                {
                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "AddedByNavigation")
                        .WithMany("CustomerAddedByNavigations")
                        .HasForeignKey("AddedBy")
                        .IsRequired()
                        .HasConstraintName("FK_Customers_Users");

                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "ModifiedByNavigation")
                        .WithMany("CustomerModifiedByNavigations")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("FK_Customers_Users1");

                    b.HasOne("GegiCRM.Entities.Concrete.Sector", "Sector")
                        .WithMany("Customers")
                        .HasForeignKey("SectorId")
                        .HasConstraintName("FK_Customers_Sectors");

                    b.HasOne("GegiCRM.Entities.Concrete.Segment", "Segment")
                        .WithMany("Customers")
                        .HasForeignKey("SegmentId")
                        .IsRequired()
                        .HasConstraintName("FK_Customers_Segments");

                    b.HasOne("GegiCRM.Entities.Concrete.CustomerType", "Type")
                        .WithMany("Customers")
                        .HasForeignKey("TypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Customers_CustomerTypes");

                    b.Navigation("AddedByNavigation");

                    b.Navigation("ModifiedByNavigation");

                    b.Navigation("Sector");

                    b.Navigation("Segment");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.CustomerAddress", b =>
                {
                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "AddedByNavigation")
                        .WithMany("CustomerAddressAddedByNavigations")
                        .HasForeignKey("AddedBy")
                        .IsRequired()
                        .HasConstraintName("FK_CustomerDeliveryAddresses_Users");

                    b.HasOne("GegiCRM.Entities.Concrete.Customer", "Customer")
                        .WithMany("CustomerAddresses")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_CustomerAddresses_Customers");

                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "ModifiedByNavigation")
                        .WithMany("CustomerAddressModifiedByNavigations")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("FK_CustomerDeliveryAddresses_Users1");

                    b.Navigation("AddedByNavigation");

                    b.Navigation("Customer");

                    b.Navigation("ModifiedByNavigation");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.CustomerBillingAddress", b =>
                {
                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "AddedByNavigation")
                        .WithMany("CustomerBillingAddressAddedByNavigations")
                        .HasForeignKey("AddedBy")
                        .IsRequired()
                        .HasConstraintName("FK_CustomerBillingAddresses_AddedBy");

                    b.HasOne("GegiCRM.Entities.Concrete.Customer", "Customer")
                        .WithMany("CustomerBillingAddresses")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_CustomerBillingAddresses_Customers");

                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "ModifiedByNavigation")
                        .WithMany("CustomerBillingAddressModifiedByNavigations")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("FK_CustomerBillingAddresses_ModifiedBy");

                    b.Navigation("AddedByNavigation");

                    b.Navigation("Customer");

                    b.Navigation("ModifiedByNavigation");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.CustomerContact", b =>
                {
                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "AddedByNavigation")
                        .WithMany("CustomerContactAddedByNavigations")
                        .HasForeignKey("AddedBy")
                        .IsRequired()
                        .HasConstraintName("FK_CustomerContacts_Users");

                    b.HasOne("GegiCRM.Entities.Concrete.Customer", "Customer")
                        .WithMany("CustomerContacts")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_CustomerContacts_Customers");

                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "ModifiedByNavigation")
                        .WithMany("CustomerContactModifiedByNavigations")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("FK_CustomerContacts_Users1");

                    b.Navigation("AddedByNavigation");

                    b.Navigation("Customer");

                    b.Navigation("ModifiedByNavigation");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.CustomerDetail", b =>
                {
                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "AddedByNavigation")
                        .WithMany("CustomerDetailAddedByNavigations")
                        .HasForeignKey("AddedBy")
                        .IsRequired()
                        .HasConstraintName("FK_CustomerDetails_AddedBy");

                    b.HasOne("GegiCRM.Entities.Concrete.Currency", "Currency")
                        .WithMany("CustomerDetails")
                        .HasForeignKey("CurrencyId")
                        .IsRequired()
                        .HasConstraintName("FK_CustomerDetails_Currencies");

                    b.HasOne("GegiCRM.Entities.Concrete.Customer", "Customer")
                        .WithMany("CustomerDetails")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_CustomerDetails_Customers");

                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "ModifiedByNavigation")
                        .WithMany("CustomerDetailModifiedByNavigations")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("FK_CustomerDetails_ModifiedBy");

                    b.Navigation("AddedByNavigation");

                    b.Navigation("Currency");

                    b.Navigation("Customer");

                    b.Navigation("ModifiedByNavigation");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.CustomerRepresentetiveUser", b =>
                {
                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "AddedByNavigation")
                        .WithMany("CustomerRepresentetiveUserAddedByNavigations")
                        .HasForeignKey("AddedBy")
                        .IsRequired()
                        .HasConstraintName("FK_CustomerRepresentetiveUsers_AddedBy");

                    b.HasOne("GegiCRM.Entities.Concrete.Customer", "Customer")
                        .WithMany("CustomerRepresentetiveUsers")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_CustomerRepresentetiveUsers_Customers");

                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "ModifiedByNavigation")
                        .WithMany("CustomerRepresentetiveUserModifiedByNavigations")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("FK_CustomerRepresentetiveUsers_ModifiedBy");

                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "User")
                        .WithMany("CustomerRepresentetiveUsers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_CustomerRepresentetiveUsers_Users");

                    b.Navigation("AddedByNavigation");

                    b.Navigation("Customer");

                    b.Navigation("ModifiedByNavigation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.CustomerType", b =>
                {
                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "AddedByNavigation")
                        .WithMany("CustomerTypeAddedByNavigations")
                        .HasForeignKey("AddedBy")
                        .IsRequired()
                        .HasConstraintName("FK_CustomerType_AddedBy");

                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "ModifiedByNavigation")
                        .WithMany("CustomerTypeModifiedByNavigations")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("FK_CustomerType_ModifiedBy");

                    b.Navigation("AddedByNavigation");

                    b.Navigation("ModifiedByNavigation");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.Department", b =>
                {
                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "AddedByNavigation")
                        .WithMany("DepartmentAddedByNavigations")
                        .HasForeignKey("AddedBy")
                        .IsRequired()
                        .HasConstraintName("FK_Departments_Users");

                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "ModifiedByNavigation")
                        .WithMany("DepartmentModifiedByNavigations")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("FK_Departments_Users1");

                    b.Navigation("AddedByNavigation");

                    b.Navigation("ModifiedByNavigation");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.DepartmentsOfUser", b =>
                {
                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "AddedByNavigation")
                        .WithMany("DepartmentsOfUsersAddedByNavigations")
                        .HasForeignKey("AddedBy")
                        .IsRequired()
                        .HasConstraintName("FK_DepartmentsOfUsers_AddedBy");

                    b.HasOne("GegiCRM.Entities.Concrete.Department", "Department")
                        .WithMany("DepartmentsOfUsers")
                        .HasForeignKey("DepartmentId")
                        .IsRequired()
                        .HasConstraintName("FK_DepartmentsOfUsers_Departments");

                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "ModifiedByNavigation")
                        .WithMany("DepartmentsOfUsersModifiedByNavigations")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("FK_DepartmentsOfUsers_ModifiedBy");

                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "User")
                        .WithMany("DepartmentsOfUsers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_DepartmentsOfUsers_Users");

                    b.Navigation("AddedByNavigation");

                    b.Navigation("Department");

                    b.Navigation("ModifiedByNavigation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.Deposit", b =>
                {
                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "AddedByNavigation")
                        .WithMany("DepositAddedByNavigations")
                        .HasForeignKey("AddedBy")
                        .IsRequired()
                        .HasConstraintName("FK_Deposits_Users");

                    b.HasOne("GegiCRM.Entities.Concrete.Currency", "Currency")
                        .WithMany("Deposits")
                        .HasForeignKey("CurrencyId")
                        .IsRequired()
                        .HasConstraintName("FK_Deposits_Currencies");

                    b.HasOne("GegiCRM.Entities.Concrete.DepositRelation", "DepositRelation")
                        .WithMany("Deposits")
                        .HasForeignKey("DepositRelationId")
                        .IsRequired()
                        .HasConstraintName("FK_Deposits_DepositRelations");

                    b.HasOne("GegiCRM.Entities.Concrete.DepositType", "DepositType")
                        .WithMany("Deposits")
                        .HasForeignKey("DepositTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Deposits_DepositTypes");

                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "ModifiedByNavigation")
                        .WithMany("DepositModifiedByNavigations")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("FK_Deposits_Users1");

                    b.Navigation("AddedByNavigation");

                    b.Navigation("Currency");

                    b.Navigation("DepositRelation");

                    b.Navigation("DepositType");

                    b.Navigation("ModifiedByNavigation");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.DepositRelation", b =>
                {
                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "AddedByNavigation")
                        .WithMany("DepositRelationAddedByNavigations")
                        .HasForeignKey("AddedBy")
                        .IsRequired()
                        .HasConstraintName("FK_DepositRelations_Users");

                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "ModifiedByNavigation")
                        .WithMany("DepositRelationModifiedByNavigations")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("FK_DepositRelations_Users1");

                    b.Navigation("AddedByNavigation");

                    b.Navigation("ModifiedByNavigation");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.DepositType", b =>
                {
                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "AddedByNavigation")
                        .WithMany("DepositTypeAddedByNavigations")
                        .HasForeignKey("AddedBy")
                        .IsRequired()
                        .HasConstraintName("FK_DepositTypes_Users");

                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "ModifiedByNavigation")
                        .WithMany("DepositTypeModifiedByNavigations")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("FK_DepositTypes_Users1");

                    b.Navigation("AddedByNavigation");

                    b.Navigation("ModifiedByNavigation");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.DiscountCupon", b =>
                {
                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "AddedByNavigation")
                        .WithMany("DiscountCuponAddedByNavigations")
                        .HasForeignKey("AddedBy")
                        .IsRequired()
                        .HasConstraintName("FK_DiscountCupons_Users");

                    b.HasOne("GegiCRM.Entities.Concrete.Currency", "CuponCurrency")
                        .WithMany("DiscountCupons")
                        .HasForeignKey("CuponCurrencyId")
                        .IsRequired()
                        .HasConstraintName("FK_DiscountCupons_Currencies");

                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "ModifiedByNavigation")
                        .WithMany("DiscountCuponModifiedByNavigations")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("FK_DiscountCupons_Users1");

                    b.Navigation("AddedByNavigation");

                    b.Navigation("CuponCurrency");

                    b.Navigation("ModifiedByNavigation");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.DiscountCuponsOfCustomer", b =>
                {
                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "AddedByNavigation")
                        .WithMany("DiscountCuponsOfCustomerAddedByNavigations")
                        .HasForeignKey("AddedBy")
                        .IsRequired()
                        .HasConstraintName("FK_DiscountCuponsOfCustomers_Users");

                    b.HasOne("GegiCRM.Entities.Concrete.Customer", "Customer")
                        .WithMany("DiscountCuponsOfCustomers")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_DiscountCuponsOfCustomers_Customers");

                    b.HasOne("GegiCRM.Entities.Concrete.DiscountCupon", "DiscountCupon")
                        .WithMany("DiscountCuponsOfCustomers")
                        .HasForeignKey("DiscountCuponId")
                        .IsRequired()
                        .HasConstraintName("FK_DiscountCuponsOfCustomers_DiscountCupons");

                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "ModifiedByNavigation")
                        .WithMany("DiscountCuponsOfCustomerModifiedByNavigations")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("FK_DiscountCuponsOfCustomers_Users1");

                    b.Navigation("AddedByNavigation");

                    b.Navigation("Customer");

                    b.Navigation("DiscountCupon");

                    b.Navigation("ModifiedByNavigation");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.Document", b =>
                {
                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "AddedByNavigation")
                        .WithMany("DocumentAddedByNavigations")
                        .HasForeignKey("AddedBy")
                        .IsRequired()
                        .HasConstraintName("FK_Documents_Users");

                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "ModifiedByNavigation")
                        .WithMany("DocumentModifiedByNavigations")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("FK_Documents_Users1");

                    b.HasOne("GegiCRM.Entities.Concrete.DocumentType", "Type")
                        .WithMany("Documents")
                        .HasForeignKey("TypeId")
                        .HasConstraintName("FK_Documents_DocumentTypes");

                    b.Navigation("AddedByNavigation");

                    b.Navigation("ModifiedByNavigation");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.DocumentType", b =>
                {
                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "AddedByNavigation")
                        .WithMany()
                        .HasForeignKey("AddedByNavigationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "ModifiedByNavigation")
                        .WithMany()
                        .HasForeignKey("ModifiedByNavigationId");

                    b.Navigation("AddedByNavigation");

                    b.Navigation("ModifiedByNavigation");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.EmailTemplate", b =>
                {
                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "AddedByNavigation")
                        .WithMany("EmailTemplateAddedByNavigations")
                        .HasForeignKey("AddedBy")
                        .IsRequired()
                        .HasConstraintName("FK_EmailTemplates_Users2");

                    b.HasOne("GegiCRM.Entities.Concrete.Department", "Department")
                        .WithMany("EmailTemplates")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("FK_EmailTemplates_Departments");

                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "ModifiedByNavigation")
                        .WithMany("EmailTemplateModifiedByNavigations")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("FK_EmailTemplates_Users3");

                    b.Navigation("AddedByNavigation");

                    b.Navigation("Department");

                    b.Navigation("ModifiedByNavigation");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.Expansion", b =>
                {
                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "AddedByNavigation")
                        .WithMany("ExpansionAddedByNavigations")
                        .HasForeignKey("AddedBy")
                        .IsRequired()
                        .HasConstraintName("FK_Acilimlar_Users");

                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "ModifiedByNavigation")
                        .WithMany("ExpansionModifiedByNavigations")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("FK_Acilimlar_Users1");

                    b.Navigation("AddedByNavigation");

                    b.Navigation("ModifiedByNavigation");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.MaintenanceBill", b =>
                {
                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "AddedByNavigation")
                        .WithMany("MaintenanceBillAddedByNavigations")
                        .HasForeignKey("AddedBy")
                        .IsRequired()
                        .HasConstraintName("FK_MaintenanceBills_Users");

                    b.HasOne("GegiCRM.Entities.Concrete.Currency", "Currency")
                        .WithMany("MaintenanceBills")
                        .HasForeignKey("CurrencyId")
                        .IsRequired()
                        .HasConstraintName("FK_MaintenanceBills_Currencies");

                    b.HasOne("GegiCRM.Entities.Concrete.Customer", "Customer")
                        .WithMany("MaintenanceBills")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_MaintenanceBills_Customers");

                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "CustomerRepresentetiveUser")
                        .WithMany("MaintenanceBillCustomerRepresentetiveUsers")
                        .HasForeignKey("CustomerRepresentetiveUserId")
                        .HasConstraintName("FK_MaintenanceBills_Users3");

                    b.HasOne("GegiCRM.Entities.Concrete.MaintenencePeriod", "MaintenencePeriod")
                        .WithMany("MaintenanceBills")
                        .HasForeignKey("MaintenencePeriodId")
                        .IsRequired()
                        .HasConstraintName("FK_MaintenanceBills_MaintenencePeriods");

                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "ModifiedByNavigation")
                        .WithMany("MaintenanceBillModifiedByNavigations")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("FK_MaintenanceBills_Users1");

                    b.HasOne("GegiCRM.Entities.Concrete.ProductGroup", "ProductGroup")
                        .WithMany("MaintenanceBills")
                        .HasForeignKey("ProductGroupId")
                        .IsRequired()
                        .HasConstraintName("FK_MaintenanceBills_ProductCategories");

                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "SellingRepresentetiveUser")
                        .WithMany("MaintenanceBillSellingRepresentetiveUsers")
                        .HasForeignKey("SellingRepresentetiveUserId")
                        .HasConstraintName("FK_MaintenanceBills_Users2");

                    b.Navigation("AddedByNavigation");

                    b.Navigation("Currency");

                    b.Navigation("Customer");

                    b.Navigation("CustomerRepresentetiveUser");

                    b.Navigation("MaintenencePeriod");

                    b.Navigation("ModifiedByNavigation");

                    b.Navigation("ProductGroup");

                    b.Navigation("SellingRepresentetiveUser");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.MaintenencePeriod", b =>
                {
                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "AddedByNavigation")
                        .WithMany("MaintenencePeriodAddedByNavigations")
                        .HasForeignKey("AddedBy")
                        .IsRequired()
                        .HasConstraintName("FK_MaintenencePeriods_Users");

                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "ModifiedByNavigation")
                        .WithMany("MaintenencePeriodModifiedByNavigations")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("FK_MaintenencePeriods_Users1");

                    b.Navigation("AddedByNavigation");

                    b.Navigation("ModifiedByNavigation");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.MarketPlace", b =>
                {
                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "AddedByNavigation")
                        .WithMany("MarketPlaceAddedByNavigations")
                        .HasForeignKey("AddedBy")
                        .IsRequired()
                        .HasConstraintName("FK_MarketPlaces_Users");

                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "ModifiedByNavigation")
                        .WithMany("MarketPlaceModifiedByNavigations")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("FK_MarketPlaces_Users1");

                    b.Navigation("AddedByNavigation");

                    b.Navigation("ModifiedByNavigation");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.Order", b =>
                {
                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "AddedByNavigation")
                        .WithMany("OrderAddedByNavigations")
                        .HasForeignKey("AddedBy")
                        .IsRequired()
                        .HasConstraintName("FK_Orders_Users");

                    b.HasOne("GegiCRM.Entities.Concrete.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_Orders_Customers");

                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "ModifiedByNavigation")
                        .WithMany("OrderModifiedByNavigations")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("FK_Orders_Users1");

                    b.HasOne("GegiCRM.Entities.Concrete.OrderAndProductState", "OrderState")
                        .WithMany("Orders")
                        .HasForeignKey("OrderStateId")
                        .IsRequired()
                        .HasConstraintName("FK_Orders_OrderStates");

                    b.Navigation("AddedByNavigation");

                    b.Navigation("Customer");

                    b.Navigation("ModifiedByNavigation");

                    b.Navigation("OrderState");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.OrderAndProductState", b =>
                {
                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "AddedByNavigation")
                        .WithMany("OrderAndProductStateAddedByNavigations")
                        .HasForeignKey("AddedBy")
                        .IsRequired()
                        .HasConstraintName("FK_OrderStates_Users");

                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "ModifiedByNavigation")
                        .WithMany("OrderAndProductStateModifiedByNavigations")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("FK_OrderStates_Users1");

                    b.Navigation("AddedByNavigation");

                    b.Navigation("ModifiedByNavigation");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.OrdersCurrency", b =>
                {
                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "AddedByNavigation")
                        .WithMany()
                        .HasForeignKey("AddedByNavigationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GegiCRM.Entities.Concrete.Currency", "Currency")
                        .WithMany("OrdersCurrencies")
                        .HasForeignKey("CurrencyId")
                        .IsRequired()
                        .HasConstraintName("FK_OrdersCurrencies_Currencies");

                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "ModifiedByNavigation")
                        .WithMany()
                        .HasForeignKey("ModifiedByNavigationId");

                    b.HasOne("GegiCRM.Entities.Concrete.Order", "Order")
                        .WithMany("OrdersCurrencies")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK_OrdersCurrencies_Orders");

                    b.Navigation("AddedByNavigation");

                    b.Navigation("Currency");

                    b.Navigation("ModifiedByNavigation");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.OrdersProduct", b =>
                {
                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "AddedByNavigation")
                        .WithMany("OrdersProductAddedByNavigations")
                        .HasForeignKey("AddedBy")
                        .IsRequired()
                        .HasConstraintName("FK_OrdersProducts_Users");

                    b.HasOne("GegiCRM.Entities.Concrete.Birim", "Birim")
                        .WithMany("OrdersProducts")
                        .HasForeignKey("BirimId")
                        .IsRequired()
                        .HasConstraintName("FK_OrdersProducts_Birims");

                    b.HasOne("GegiCRM.Entities.Concrete.Currency", "KesinCurrency")
                        .WithMany("OrdersProductKesinCurrencies")
                        .HasForeignKey("KesinCurrencyId")
                        .HasConstraintName("FK_OrdersProducts_Currencies");

                    b.HasOne("GegiCRM.Entities.Concrete.Supplier", "KesinSupplier")
                        .WithMany("OrdersProductKesinSuppliers")
                        .HasForeignKey("KesinSupplierId")
                        .HasConstraintName("FK_OrdersProducts_Suppliers");

                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "ModifiedByNavigation")
                        .WithMany("OrdersProductModifiedByNavigations")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("FK_OrdersProducts_Users1");

                    b.HasOne("GegiCRM.Entities.Concrete.Order", "Order")
                        .WithMany("OrdersProducts")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK_OrdersProducts_Orders");

                    b.HasOne("GegiCRM.Entities.Concrete.Product", "Product")
                        .WithMany("OrdersProducts")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_OrdersProducts_Products");

                    b.HasOne("GegiCRM.Entities.Concrete.OrderAndProductState", "ProductState")
                        .WithMany("OrdersProducts")
                        .HasForeignKey("ProductStateId")
                        .IsRequired()
                        .HasConstraintName("FK_OrdersProducts_OrderAndProductStates");

                    b.HasOne("GegiCRM.Entities.Concrete.Currency", "ReferansCurrency")
                        .WithMany("OrdersProductReferansCurrencies")
                        .HasForeignKey("ReferansCurrencyId")
                        .HasConstraintName("FK_OrdersProducts_Currencies1");

                    b.HasOne("GegiCRM.Entities.Concrete.Supplier", "ReferansSupplier")
                        .WithMany("OrdersProductReferansSuppliers")
                        .HasForeignKey("ReferansSupplierId")
                        .IsRequired()
                        .HasConstraintName("FK_OrdersProducts_Suppliers1");

                    b.Navigation("AddedByNavigation");

                    b.Navigation("Birim");

                    b.Navigation("KesinCurrency");

                    b.Navigation("KesinSupplier");

                    b.Navigation("ModifiedByNavigation");

                    b.Navigation("Order");

                    b.Navigation("Product");

                    b.Navigation("ProductState");

                    b.Navigation("ReferansCurrency");

                    b.Navigation("ReferansSupplier");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.PaymentType", b =>
                {
                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "AddedByNavigation")
                        .WithMany("PaymentTypeAddedByNavigations")
                        .HasForeignKey("AddedBy")
                        .IsRequired()
                        .HasConstraintName("FK_PaymentTypes_Users");

                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "ModifiedByNavigation")
                        .WithMany("PaymentTypeModifiedByNavigations")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("FK_PaymentTypes_Users1");

                    b.Navigation("AddedByNavigation");

                    b.Navigation("ModifiedByNavigation");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.Product", b =>
                {
                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "AddedByNavigation")
                        .WithMany("ProductAddedByNavigations")
                        .HasForeignKey("AddedBy")
                        .IsRequired()
                        .HasConstraintName("FK_OurServices_Users");

                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "ModifiedByNavigation")
                        .WithMany("ProductModifiedByNavigations")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("FK_OurServices_Users1");

                    b.HasOne("GegiCRM.Entities.Concrete.Brand", "PorductBrand")
                        .WithMany("Products")
                        .HasForeignKey("PorductBrandId")
                        .IsRequired()
                        .HasConstraintName("FK_Products_Brands");

                    b.HasOne("GegiCRM.Entities.Concrete.ProductGroup", "ProductGroup")
                        .WithMany("Products")
                        .HasForeignKey("ProductGroupId")
                        .HasConstraintName("FK_OurServices_ServiceCategories");

                    b.Navigation("AddedByNavigation");

                    b.Navigation("ModifiedByNavigation");

                    b.Navigation("PorductBrand");

                    b.Navigation("ProductGroup");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.ProductCategory", b =>
                {
                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "AddedByNavigation")
                        .WithMany("ProductCategoryAddedByNavigations")
                        .HasForeignKey("AddedBy")
                        .IsRequired()
                        .HasConstraintName("FK_ProductSubCategories_Users");

                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "ModifiedByNavigation")
                        .WithMany("ProductCategoryModifiedByNavigations")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("FK_ProductSubCategories_Users1");

                    b.HasOne("GegiCRM.Entities.Concrete.ProductGroup", "ProductGroup")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductGroupId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductSubCategories_ProductCategories");

                    b.Navigation("AddedByNavigation");

                    b.Navigation("ModifiedByNavigation");

                    b.Navigation("ProductGroup");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.ProductGroup", b =>
                {
                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "AddedByNavigation")
                        .WithMany("ProductGroupAddedByNavigations")
                        .HasForeignKey("AddedBy")
                        .IsRequired()
                        .HasConstraintName("FK_ProductCategories_Users");

                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "ModifiedByNavigation")
                        .WithMany("ProductGroupModifiedByNavigations")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("FK_ProductCategories_Users1");

                    b.Navigation("AddedByNavigation");

                    b.Navigation("ModifiedByNavigation");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.ProductGroupsFaq", b =>
                {
                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "AddedByNavigation")
                        .WithMany("ProductGroupsFaqAddedByNavigations")
                        .HasForeignKey("AddedBy")
                        .IsRequired()
                        .HasConstraintName("FK_ProductCategoriesFAQs_Users");

                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "ModifiedByNavigation")
                        .WithMany("ProductGroupsFaqModifiedByNavigations")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("FK_ProductCategoriesFAQs_Users1");

                    b.HasOne("GegiCRM.Entities.Concrete.ProductGroup", "ProductGroup")
                        .WithMany("ProductGroupsFaqs")
                        .HasForeignKey("ProductGroupId")
                        .HasConstraintName("FK_ProductCategoriesFAQs_ProductCategories");

                    b.Navigation("AddedByNavigation");

                    b.Navigation("ModifiedByNavigation");

                    b.Navigation("ProductGroup");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.ReturnAndFault", b =>
                {
                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "AddedByNavigation")
                        .WithMany("ReturnAndFaultAddedByNavigations")
                        .HasForeignKey("AddedBy")
                        .IsRequired()
                        .HasConstraintName("FK_ReturnAndFaults_Users");

                    b.HasOne("GegiCRM.Entities.Concrete.ReturnAndFaultState", "CurrentState")
                        .WithMany("ReturnAndFaults")
                        .HasForeignKey("CurrentStateId")
                        .HasConstraintName("FK_ReturnAndFaults_ReturnAndFaultStates");

                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "ModifiedByNavigation")
                        .WithMany("ReturnAndFaultModifiedByNavigations")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("FK_ReturnAndFaults_Users1");

                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "RepresentitveUserNavigation")
                        .WithMany("ReturnAndFaultRepresentitveUserNavigations")
                        .HasForeignKey("RepresentitveUser")
                        .IsRequired()
                        .HasConstraintName("FK_ReturnAndFaults_Users2");

                    b.Navigation("AddedByNavigation");

                    b.Navigation("CurrentState");

                    b.Navigation("ModifiedByNavigation");

                    b.Navigation("RepresentitveUserNavigation");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.ReturnAndFaultState", b =>
                {
                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "AddedByNavigation")
                        .WithMany("ReturnAndFaultStateAddedByNavigations")
                        .HasForeignKey("AddedBy")
                        .IsRequired()
                        .HasConstraintName("FK_ReturnAndFaultStates_Users");

                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "ModifiedByNavigation")
                        .WithMany("ReturnAndFaultStateModifiedByNavigations")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("FK_ReturnAndFaultStates_Users1");

                    b.Navigation("AddedByNavigation");

                    b.Navigation("ModifiedByNavigation");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.Rule", b =>
                {
                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "AddedByNavigation")
                        .WithMany("RuleAddedByNavigations")
                        .HasForeignKey("AddedBy")
                        .IsRequired()
                        .HasConstraintName("FK_Rules_Users");

                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "ModifiedByNavigation")
                        .WithMany("RuleModifiedByNavigations")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("FK_Rules_Users1");

                    b.Navigation("AddedByNavigation");

                    b.Navigation("ModifiedByNavigation");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.Sector", b =>
                {
                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "AddedByNavigation")
                        .WithMany("SectorAddedByNavigations")
                        .HasForeignKey("AddedBy")
                        .IsRequired()
                        .HasConstraintName("FK_Sector_AddedBy");

                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "ModifiedByNavigation")
                        .WithMany("SectorModifiedByNavigations")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("FK_Sector_ModidfiedBy");

                    b.Navigation("AddedByNavigation");

                    b.Navigation("ModifiedByNavigation");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.Segment", b =>
                {
                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "AddedByNavigation")
                        .WithMany("SegmentAddedByNavigations")
                        .HasForeignKey("AddedBy")
                        .IsRequired()
                        .HasConstraintName("FK_Segments_Users");

                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "ModifiedByNavigation")
                        .WithMany("SegmentModifiedByNavigations")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("FK_Segments_Users1");

                    b.Navigation("AddedByNavigation");

                    b.Navigation("ModifiedByNavigation");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.SegmentOran", b =>
                {
                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "AddedByNavigation")
                        .WithMany("SegmentOranAddedByNavigations")
                        .HasForeignKey("AddedBy")
                        .IsRequired()
                        .HasConstraintName("FK_SegmentOrans_Users");

                    b.HasOne("GegiCRM.Entities.Concrete.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "ModifiedByNavigation")
                        .WithMany("SegmentOranModifiedByNavigations")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("FK_SegmentOrans_Users1");

                    b.HasOne("GegiCRM.Entities.Concrete.Segment", "Segment")
                        .WithMany("SegmentOrans")
                        .HasForeignKey("SegmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_SegmentOrans_Segments");

                    b.Navigation("AddedByNavigation");

                    b.Navigation("Currency");

                    b.Navigation("ModifiedByNavigation");

                    b.Navigation("Segment");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.SellsAndBuysAsset", b =>
                {
                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "AddedByNavigation")
                        .WithMany("SellsAndBuysAssetAddedByNavigations")
                        .HasForeignKey("AddedBy")
                        .IsRequired()
                        .HasConstraintName("FK_SellsAndBuysAssets_Users");

                    b.HasOne("GegiCRM.Entities.Concrete.SellsAndBuysGuideStep", "CurrentStep")
                        .WithMany("SellsAndBuysAssets")
                        .HasForeignKey("CurrentStepId")
                        .HasConstraintName("FK_SellsAndBuysAssets_SellsAndBuysGuideSteps");

                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "ModifiedByNavigation")
                        .WithMany("SellsAndBuysAssetModifiedByNavigations")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("FK_SellsAndBuysAssets_Users1");

                    b.HasOne("GegiCRM.Entities.Concrete.SellsAndBuysCategory", "Sabcategory")
                        .WithMany("SellsAndBuysAssets")
                        .HasForeignKey("SabcategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_SellsAndBuysAssets_SellsAndBuysCategories");

                    b.Navigation("AddedByNavigation");

                    b.Navigation("CurrentStep");

                    b.Navigation("ModifiedByNavigation");

                    b.Navigation("Sabcategory");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.SellsAndBuysCategory", b =>
                {
                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "AddedByNavigation")
                        .WithMany("SellsAndBuysCategoryAddedByNavigations")
                        .HasForeignKey("AddedBy")
                        .IsRequired()
                        .HasConstraintName("FK_SellsAndBuysCategories_Users");

                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "ModifiedByNavigation")
                        .WithMany("SellsAndBuysCategoryModifiedByNavigations")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("FK_SellsAndBuysCategories_Users1");

                    b.Navigation("AddedByNavigation");

                    b.Navigation("ModifiedByNavigation");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.SellsAndBuysGuideStep", b =>
                {
                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "AddedByNavigation")
                        .WithMany("SellsAndBuysGuideStepAddedByNavigations")
                        .HasForeignKey("AddedBy")
                        .IsRequired()
                        .HasConstraintName("FK_SellsAndBuysGuideSteps_Users");

                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "ModifiedByNavigation")
                        .WithMany("SellsAndBuysGuideStepModifiedByNavigations")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("FK_SellsAndBuysGuideSteps_Users1");

                    b.HasOne("GegiCRM.Entities.Concrete.SellsAndBuysCategory", "Sabcategory")
                        .WithMany("SellsAndBuysGuideSteps")
                        .HasForeignKey("SabcategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_SellsAndBuysGuideSteps_SellsAndBuysCategories");

                    b.Navigation("AddedByNavigation");

                    b.Navigation("ModifiedByNavigation");

                    b.Navigation("Sabcategory");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.ServicePlace", b =>
                {
                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "AddedByNavigation")
                        .WithMany("ServicePlaceAddedByNavigations")
                        .HasForeignKey("AddedBy")
                        .IsRequired()
                        .HasConstraintName("FK_ServicePlaces_Users");

                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "ModifiedByNavigation")
                        .WithMany("ServicePlaceModifiedByNavigations")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("FK_ServicePlaces_Users1");

                    b.Navigation("AddedByNavigation");

                    b.Navigation("ModifiedByNavigation");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.ServiceReason", b =>
                {
                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "AddedByNavigation")
                        .WithMany("ServiceReasonAddedByNavigations")
                        .HasForeignKey("AddedBy")
                        .IsRequired()
                        .HasConstraintName("FK_ServiceReasons_Users");

                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "ModifiedByNavigation")
                        .WithMany("ServiceReasonModifiedByNavigations")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("FK_ServiceReasons_Users1");

                    b.Navigation("AddedByNavigation");

                    b.Navigation("ModifiedByNavigation");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.ServiceRecord", b =>
                {
                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "AddedByNavigation")
                        .WithMany("ServiceRecordAddedByNavigations")
                        .HasForeignKey("AddedBy")
                        .IsRequired()
                        .HasConstraintName("FK_ServiceRecords_Users");

                    b.HasOne("GegiCRM.Entities.Concrete.Customer", "Customer")
                        .WithMany("ServiceRecords")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_ServiceRecords_Customers");

                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "ModifiedByNavigation")
                        .WithMany("ServiceRecordModifiedByNavigations")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("FK_ServiceRecords_Users1");

                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "ServicePersonalUserNavigation")
                        .WithMany("ServiceRecordServicePersonalUserNavigations")
                        .HasForeignKey("ServicePersonalUser")
                        .IsRequired()
                        .HasConstraintName("FK_ServiceRecords_Users2");

                    b.HasOne("GegiCRM.Entities.Concrete.ServicePlace", "ServicePlace")
                        .WithMany("ServiceRecords")
                        .HasForeignKey("ServicePlaceId")
                        .IsRequired()
                        .HasConstraintName("FK_ServiceRecords_ServicePlaces");

                    b.HasOne("GegiCRM.Entities.Concrete.ServiceReason", "ServiceReason")
                        .WithMany("ServiceRecords")
                        .HasForeignKey("ServiceReasonId")
                        .IsRequired()
                        .HasConstraintName("FK_ServiceRecords_ServiceReasons");

                    b.HasOne("GegiCRM.Entities.Concrete.ServiceType", "ServiceType")
                        .WithMany("ServiceRecords")
                        .HasForeignKey("ServiceTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_ServiceRecords_ServiceTypes");

                    b.Navigation("AddedByNavigation");

                    b.Navigation("Customer");

                    b.Navigation("ModifiedByNavigation");

                    b.Navigation("ServicePersonalUserNavigation");

                    b.Navigation("ServicePlace");

                    b.Navigation("ServiceReason");

                    b.Navigation("ServiceType");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.ServiceType", b =>
                {
                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "AddedByNavigation")
                        .WithMany("ServiceTypeAddedByNavigations")
                        .HasForeignKey("AddedBy")
                        .IsRequired()
                        .HasConstraintName("FK_ServiceTypes_Users");

                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "ModifiedByNavigation")
                        .WithMany("ServiceTypeModifiedByNavigations")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("FK_ServiceTypes_Users1");

                    b.Navigation("AddedByNavigation");

                    b.Navigation("ModifiedByNavigation");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.ShippingDeal", b =>
                {
                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "AddedByNavigation")
                        .WithMany()
                        .HasForeignKey("AddedByNavigationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GegiCRM.Entities.Concrete.UserCompany", "Company")
                        .WithMany("ShippingDeals")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK_ShippingDeals_UserCompanies");

                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "ModifiedByNavigation")
                        .WithMany()
                        .HasForeignKey("ModifiedByNavigationId");

                    b.Navigation("AddedByNavigation");

                    b.Navigation("Company");

                    b.Navigation("ModifiedByNavigation");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.Supplier", b =>
                {
                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "AddedByNavigation")
                        .WithMany("SupplierAddedByNavigations")
                        .HasForeignKey("AddedBy")
                        .IsRequired()
                        .HasConstraintName("FK_Suppliers_Users");

                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "ModifiedByNavigation")
                        .WithMany("SupplierModifiedByNavigations")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("FK_Suppliers_Users1");

                    b.Navigation("AddedByNavigation");

                    b.Navigation("ModifiedByNavigation");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.SupplierDetail", b =>
                {
                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "AddedByNavigation")
                        .WithMany()
                        .HasForeignKey("AddedByNavigationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GegiCRM.Entities.Concrete.Currency", "Currency")
                        .WithMany("SupplierDetails")
                        .HasForeignKey("CurrencyId")
                        .IsRequired()
                        .HasConstraintName("FK_SupplierDetails_Currencies");

                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "ModifiedByNavigation")
                        .WithMany()
                        .HasForeignKey("ModifiedByNavigationId");

                    b.HasOne("GegiCRM.Entities.Concrete.Supplier", "Supplier")
                        .WithMany("SupplierDetails")
                        .HasForeignKey("SupplierId")
                        .IsRequired()
                        .HasConstraintName("FK_SupplierDetails_Suppliers1");

                    b.Navigation("AddedByNavigation");

                    b.Navigation("Currency");

                    b.Navigation("ModifiedByNavigation");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.SupplierPaymentState", b =>
                {
                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "AddedByNavigation")
                        .WithMany("SupplierPaymentStateAddedByNavigations")
                        .HasForeignKey("AddedBy")
                        .IsRequired()
                        .HasConstraintName("FK_SupplierPaymentStates_Users");

                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "ModifiedByNavigation")
                        .WithMany("SupplierPaymentStateModifiedByNavigations")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("FK_SupplierPaymentStates_Users1");

                    b.Navigation("AddedByNavigation");

                    b.Navigation("ModifiedByNavigation");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.SuppliersPayment", b =>
                {
                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "AddedByNavigation")
                        .WithMany("SuppliersPaymentAddedByNavigations")
                        .HasForeignKey("AddedBy")
                        .IsRequired()
                        .HasConstraintName("FK_SuppliersPayments_Users");

                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "ModifiedByNavigation")
                        .WithMany("SuppliersPaymentModifiedByNavigations")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("FK_SuppliersPayments_Users1");

                    b.HasOne("GegiCRM.Entities.Concrete.SupplierPaymentState", "State")
                        .WithMany("SuppliersPayments")
                        .HasForeignKey("StateId")
                        .IsRequired()
                        .HasConstraintName("FK_SuppliersPayments_SupplierPaymentStatuses");

                    b.Navigation("AddedByNavigation");

                    b.Navigation("ModifiedByNavigation");

                    b.Navigation("State");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.UserCompany", b =>
                {
                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "AddedByNavigation")
                        .WithMany("UserCompanyAddedByNavigations")
                        .HasForeignKey("AddedBy")
                        .HasConstraintName("FK_UserCompanies_Users");

                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "ModifiedByNavigation")
                        .WithMany("UserCompanyModifiedByNavigations")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("FK_UserCompanies_Users1");

                    b.Navigation("AddedByNavigation");

                    b.Navigation("ModifiedByNavigation");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.VehicleInformation", b =>
                {
                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "AddedByNavigation")
                        .WithMany("VehicleInformationAddedByNavigations")
                        .HasForeignKey("AddedBy")
                        .IsRequired()
                        .HasConstraintName("FK_VehicleInformations_Users");

                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "ModifiedByNavigation")
                        .WithMany("VehicleInformationModifiedByNavigations")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("FK_VehicleInformations_Users1");

                    b.HasOne("GegiCRM.Entities.Concrete.UserCompany", "UserCompany")
                        .WithMany("VehicleInformations")
                        .HasForeignKey("UserCompanyId")
                        .IsRequired()
                        .HasConstraintName("FK_VehicleInformations_UserCompanies");

                    b.Navigation("AddedByNavigation");

                    b.Navigation("ModifiedByNavigation");

                    b.Navigation("UserCompany");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.WarrantyTracking", b =>
                {
                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "AddedByNavigation")
                        .WithMany("WarrantyTrackingAddedByNavigations")
                        .HasForeignKey("AddedBy")
                        .IsRequired()
                        .HasConstraintName("FK_WarrantyTrackings_Users");

                    b.HasOne("GegiCRM.Entities.Concrete.Brand", "Brand")
                        .WithMany("WarrantyTrackings")
                        .HasForeignKey("BrandId")
                        .IsRequired()
                        .HasConstraintName("FK_WarrantyTrackings_Brands");

                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "ModifiedByNavigation")
                        .WithMany("WarrantyTrackingModifiedByNavigations")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("FK_WarrantyTrackings_Users1");

                    b.Navigation("AddedByNavigation");

                    b.Navigation("Brand");

                    b.Navigation("ModifiedByNavigation");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.WorkStandart", b =>
                {
                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "AddedByNavigation")
                        .WithMany("WorkStandartAddedByNavigations")
                        .HasForeignKey("AddedBy")
                        .IsRequired()
                        .HasConstraintName("FK_WorkStandarts_Users");

                    b.HasOne("GegiCRM.Entities.Concrete.Department", "Department")
                        .WithMany("WorkStandarts")
                        .HasForeignKey("DepartmentId")
                        .IsRequired()
                        .HasConstraintName("FK_WorkStandarts_Departments");

                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "ModifiedByNavigation")
                        .WithMany("WorkStandartModifiedByNavigations")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("FK_WorkStandarts_Users1");

                    b.Navigation("AddedByNavigation");

                    b.Navigation("Department");

                    b.Navigation("ModifiedByNavigation");
                });

            modelBuilder.Entity("MarketPlacesOfSupplier", b =>
                {
                    b.HasOne("GegiCRM.Entities.Concrete.MarketPlace", null)
                        .WithMany()
                        .HasForeignKey("MarketPlaceId")
                        .IsRequired()
                        .HasConstraintName("FK_MarketPlacesOfSuppliers_MarketPlaces");

                    b.HasOne("GegiCRM.Entities.Concrete.Supplier", null)
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .IsRequired()
                        .HasConstraintName("FK_MarketPlacesOfSuppliers_Suppliers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("GegiCRM.Entities.Concrete.AppIdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("GegiCRM.Entities.Concrete.AppIdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProductGroupsOfSupplier", b =>
                {
                    b.HasOne("GegiCRM.Entities.Concrete.ProductGroup", null)
                        .WithMany()
                        .HasForeignKey("ProductGroupId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductCategoriesSuppliers_ProductCategories");

                    b.HasOne("GegiCRM.Entities.Concrete.Supplier", null)
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductCategoriesSuppliers_Suppliers");
                });

            modelBuilder.Entity("ProductsOfSupplier", b =>
                {
                    b.HasOne("GegiCRM.Entities.Concrete.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductsOfSuppliers_Products");

                    b.HasOne("GegiCRM.Entities.Concrete.Supplier", null)
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductsOfSuppliers_Suppliers");
                });

            modelBuilder.Entity("SuppliersBrand", b =>
                {
                    b.HasOne("GegiCRM.Entities.Concrete.Brand", null)
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .IsRequired()
                        .HasConstraintName("FK_SuppliersBrands_Brands");

                    b.HasOne("GegiCRM.Entities.Concrete.Supplier", null)
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .IsRequired()
                        .HasConstraintName("FK_SuppliersBrands_Suppliers");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.AppRolesOfUsers", b =>
                {
                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "AddedByNavigation")
                        .WithMany("AppRolesOfUsersAddedByNavigations")
                        .HasForeignKey("AddedBy")
                        .IsRequired()
                        .HasConstraintName("FK_UsersAuthorizations_AddedBy");

                    b.HasOne("GegiCRM.Entities.Concrete.AppUser", "ModifiedByNavigation")
                        .WithMany("AppRolesOfUsersModifiedByNavigations")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("FK_UsersAuthorizations_ModifiedBy");

                    b.Navigation("AddedByNavigation");

                    b.Navigation("ModifiedByNavigation");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.AppIdentityRoleGroup", b =>
                {
                    b.Navigation("Roles");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.AppUser", b =>
                {
                    b.Navigation("AnnouncementsAddedByNavigations");

                    b.Navigation("AnnouncementsModifiedByNavigations");

                    b.Navigation("AppAuthorizationRoleGroupAddedByNavigations");

                    b.Navigation("AppAuthorizationRoleGroupModifiedByNavigations");

                    b.Navigation("AppRolesOfUsersAddedByNavigations");

                    b.Navigation("AppRolesOfUsersModifiedByNavigations");

                    b.Navigation("AuthorizationsRoleAddedByNavigations");

                    b.Navigation("AuthorizationsRoleModifiedByNavigations");

                    b.Navigation("BankAddedByNavigations");

                    b.Navigation("BankInformationAddedByNavigations");

                    b.Navigation("BankInformationModifiedByNavigations");

                    b.Navigation("BankModifiedByNavigations");

                    b.Navigation("BirimAddedByNavigations");

                    b.Navigation("BirimModifiedByNavigations");

                    b.Navigation("BrandAddedByNavigations");

                    b.Navigation("BrandModifiedByNavigations");

                    b.Navigation("CollectionReceiptAddedByNavigations");

                    b.Navigation("CollectionReceiptModifiedByNavigations");

                    b.Navigation("CurrencyAddedByNavigations");

                    b.Navigation("CurrencyModifiedByNavigations");

                    b.Navigation("CustomerAddedByNavigations");

                    b.Navigation("CustomerAddressAddedByNavigations");

                    b.Navigation("CustomerAddressModifiedByNavigations");

                    b.Navigation("CustomerBillingAddressAddedByNavigations");

                    b.Navigation("CustomerBillingAddressModifiedByNavigations");

                    b.Navigation("CustomerContactAddedByNavigations");

                    b.Navigation("CustomerContactModifiedByNavigations");

                    b.Navigation("CustomerDetailAddedByNavigations");

                    b.Navigation("CustomerDetailModifiedByNavigations");

                    b.Navigation("CustomerModifiedByNavigations");

                    b.Navigation("CustomerRepresentetiveUserAddedByNavigations");

                    b.Navigation("CustomerRepresentetiveUserModifiedByNavigations");

                    b.Navigation("CustomerRepresentetiveUsers");

                    b.Navigation("CustomerTypeAddedByNavigations");

                    b.Navigation("CustomerTypeModifiedByNavigations");

                    b.Navigation("DepartmentAddedByNavigations");

                    b.Navigation("DepartmentModifiedByNavigations");

                    b.Navigation("DepartmentsOfUsers");

                    b.Navigation("DepartmentsOfUsersAddedByNavigations");

                    b.Navigation("DepartmentsOfUsersModifiedByNavigations");

                    b.Navigation("DepositAddedByNavigations");

                    b.Navigation("DepositModifiedByNavigations");

                    b.Navigation("DepositRelationAddedByNavigations");

                    b.Navigation("DepositRelationModifiedByNavigations");

                    b.Navigation("DepositTypeAddedByNavigations");

                    b.Navigation("DepositTypeModifiedByNavigations");

                    b.Navigation("DiscountCuponAddedByNavigations");

                    b.Navigation("DiscountCuponModifiedByNavigations");

                    b.Navigation("DiscountCuponsOfCustomerAddedByNavigations");

                    b.Navigation("DiscountCuponsOfCustomerModifiedByNavigations");

                    b.Navigation("DocumentAddedByNavigations");

                    b.Navigation("DocumentModifiedByNavigations");

                    b.Navigation("EmailTemplateAddedByNavigations");

                    b.Navigation("EmailTemplateModifiedByNavigations");

                    b.Navigation("ExpansionAddedByNavigations");

                    b.Navigation("ExpansionModifiedByNavigations");

                    b.Navigation("InverseAddedByNavigation");

                    b.Navigation("InverseModifiedByNavigation");

                    b.Navigation("MaintenanceBillAddedByNavigations");

                    b.Navigation("MaintenanceBillCustomerRepresentetiveUsers");

                    b.Navigation("MaintenanceBillModifiedByNavigations");

                    b.Navigation("MaintenanceBillSellingRepresentetiveUsers");

                    b.Navigation("MaintenencePeriodAddedByNavigations");

                    b.Navigation("MaintenencePeriodModifiedByNavigations");

                    b.Navigation("MarketPlaceAddedByNavigations");

                    b.Navigation("MarketPlaceModifiedByNavigations");

                    b.Navigation("OrderAddedByNavigations");

                    b.Navigation("OrderAndProductStateAddedByNavigations");

                    b.Navigation("OrderAndProductStateModifiedByNavigations");

                    b.Navigation("OrderModifiedByNavigations");

                    b.Navigation("OrdersProductAddedByNavigations");

                    b.Navigation("OrdersProductModifiedByNavigations");

                    b.Navigation("PaymentTypeAddedByNavigations");

                    b.Navigation("PaymentTypeModifiedByNavigations");

                    b.Navigation("ProductAddedByNavigations");

                    b.Navigation("ProductCategoryAddedByNavigations");

                    b.Navigation("ProductCategoryModifiedByNavigations");

                    b.Navigation("ProductGroupAddedByNavigations");

                    b.Navigation("ProductGroupModifiedByNavigations");

                    b.Navigation("ProductGroupsFaqAddedByNavigations");

                    b.Navigation("ProductGroupsFaqModifiedByNavigations");

                    b.Navigation("ProductModifiedByNavigations");

                    b.Navigation("ReturnAndFaultAddedByNavigations");

                    b.Navigation("ReturnAndFaultModifiedByNavigations");

                    b.Navigation("ReturnAndFaultRepresentitveUserNavigations");

                    b.Navigation("ReturnAndFaultStateAddedByNavigations");

                    b.Navigation("ReturnAndFaultStateModifiedByNavigations");

                    b.Navigation("RuleAddedByNavigations");

                    b.Navigation("RuleModifiedByNavigations");

                    b.Navigation("SectorAddedByNavigations");

                    b.Navigation("SectorModifiedByNavigations");

                    b.Navigation("SegmentAddedByNavigations");

                    b.Navigation("SegmentModifiedByNavigations");

                    b.Navigation("SegmentOranAddedByNavigations");

                    b.Navigation("SegmentOranModifiedByNavigations");

                    b.Navigation("SellsAndBuysAssetAddedByNavigations");

                    b.Navigation("SellsAndBuysAssetModifiedByNavigations");

                    b.Navigation("SellsAndBuysCategoryAddedByNavigations");

                    b.Navigation("SellsAndBuysCategoryModifiedByNavigations");

                    b.Navigation("SellsAndBuysGuideStepAddedByNavigations");

                    b.Navigation("SellsAndBuysGuideStepModifiedByNavigations");

                    b.Navigation("ServicePlaceAddedByNavigations");

                    b.Navigation("ServicePlaceModifiedByNavigations");

                    b.Navigation("ServiceReasonAddedByNavigations");

                    b.Navigation("ServiceReasonModifiedByNavigations");

                    b.Navigation("ServiceRecordAddedByNavigations");

                    b.Navigation("ServiceRecordModifiedByNavigations");

                    b.Navigation("ServiceRecordServicePersonalUserNavigations");

                    b.Navigation("ServiceTypeAddedByNavigations");

                    b.Navigation("ServiceTypeModifiedByNavigations");

                    b.Navigation("SupplierAddedByNavigations");

                    b.Navigation("SupplierModifiedByNavigations");

                    b.Navigation("SupplierPaymentStateAddedByNavigations");

                    b.Navigation("SupplierPaymentStateModifiedByNavigations");

                    b.Navigation("SuppliersPaymentAddedByNavigations");

                    b.Navigation("SuppliersPaymentModifiedByNavigations");

                    b.Navigation("UserCompanyAddedByNavigations");

                    b.Navigation("UserCompanyModifiedByNavigations");

                    b.Navigation("VehicleInformationAddedByNavigations");

                    b.Navigation("VehicleInformationModifiedByNavigations");

                    b.Navigation("WarrantyTrackingAddedByNavigations");

                    b.Navigation("WarrantyTrackingModifiedByNavigations");

                    b.Navigation("WorkStandartAddedByNavigations");

                    b.Navigation("WorkStandartModifiedByNavigations");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.Bank", b =>
                {
                    b.Navigation("BankInformations");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.Birim", b =>
                {
                    b.Navigation("OrdersProducts");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.Brand", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("WarrantyTrackings");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.Currency", b =>
                {
                    b.Navigation("CollectionReceipts");

                    b.Navigation("CustomerDetails");

                    b.Navigation("Deposits");

                    b.Navigation("DiscountCupons");

                    b.Navigation("MaintenanceBills");

                    b.Navigation("OrdersCurrencies");

                    b.Navigation("OrdersProductKesinCurrencies");

                    b.Navigation("OrdersProductReferansCurrencies");

                    b.Navigation("SupplierDetails");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.Customer", b =>
                {
                    b.Navigation("CollectionReceipts");

                    b.Navigation("CustomerAddresses");

                    b.Navigation("CustomerBillingAddresses");

                    b.Navigation("CustomerContacts");

                    b.Navigation("CustomerDetails");

                    b.Navigation("CustomerRepresentetiveUsers");

                    b.Navigation("DiscountCuponsOfCustomers");

                    b.Navigation("MaintenanceBills");

                    b.Navigation("Orders");

                    b.Navigation("ServiceRecords");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.CustomerType", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.Department", b =>
                {
                    b.Navigation("DepartmentsOfUsers");

                    b.Navigation("EmailTemplates");

                    b.Navigation("WorkStandarts");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.DepositRelation", b =>
                {
                    b.Navigation("Deposits");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.DepositType", b =>
                {
                    b.Navigation("Deposits");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.DiscountCupon", b =>
                {
                    b.Navigation("DiscountCuponsOfCustomers");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.DocumentType", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.MaintenencePeriod", b =>
                {
                    b.Navigation("MaintenanceBills");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.Order", b =>
                {
                    b.Navigation("OrdersCurrencies");

                    b.Navigation("OrdersProducts");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.OrderAndProductState", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("OrdersProducts");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.PaymentType", b =>
                {
                    b.Navigation("CollectionReceipts");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.Product", b =>
                {
                    b.Navigation("OrdersProducts");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.ProductGroup", b =>
                {
                    b.Navigation("MaintenanceBills");

                    b.Navigation("ProductCategories");

                    b.Navigation("ProductGroupsFaqs");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.ReturnAndFaultState", b =>
                {
                    b.Navigation("ReturnAndFaults");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.Sector", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.Segment", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("SegmentOrans");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.SellsAndBuysCategory", b =>
                {
                    b.Navigation("SellsAndBuysAssets");

                    b.Navigation("SellsAndBuysGuideSteps");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.SellsAndBuysGuideStep", b =>
                {
                    b.Navigation("SellsAndBuysAssets");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.ServicePlace", b =>
                {
                    b.Navigation("ServiceRecords");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.ServiceReason", b =>
                {
                    b.Navigation("ServiceRecords");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.ServiceType", b =>
                {
                    b.Navigation("ServiceRecords");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.Supplier", b =>
                {
                    b.Navigation("CollectionReceipts");

                    b.Navigation("OrdersProductKesinSuppliers");

                    b.Navigation("OrdersProductReferansSuppliers");

                    b.Navigation("SupplierDetails");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.SupplierPaymentState", b =>
                {
                    b.Navigation("SuppliersPayments");
                });

            modelBuilder.Entity("GegiCRM.Entities.Concrete.UserCompany", b =>
                {
                    b.Navigation("BankInformations");

                    b.Navigation("ShippingDeals");

                    b.Navigation("Users");

                    b.Navigation("VehicleInformations");
                });
#pragma warning restore 612, 618
        }
    }
}
